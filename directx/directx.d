module directx;

import dwinrt;

enum uint D3D11_16BIT_INDEX_STRIP_CUT_VALUE = 0xffff;
enum uint D3D11_32BIT_INDEX_STRIP_CUT_VALUE = 0xffffffff;
enum uint D3D11_8BIT_INDEX_STRIP_CUT_VALUE = 0xff;
enum uint D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
enum uint D3D11_CLIP_OR_CULL_DISTANCE_COUNT = 8;
enum uint D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
enum uint D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
enum uint D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
enum uint D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
enum uint D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
enum uint D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum uint D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
enum uint D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum uint D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum uint D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
enum uint D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
enum uint D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
enum uint D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
enum uint D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
enum uint D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
enum uint D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
enum uint D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
enum uint D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
enum uint D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
enum uint D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
enum uint D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
enum uint D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
enum uint D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
enum uint D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
enum uint D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
enum uint D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
enum uint D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
enum uint D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
enum uint D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
enum uint D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
enum INT D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
enum INT D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
enum uint D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
enum uint D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
enum uint D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
enum uint D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
enum uint D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
enum uint D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
enum uint D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
enum uint D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
enum uint D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
enum uint D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
enum uint D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
enum uint D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
enum uint D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
enum uint D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
enum uint D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
enum uint D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
enum uint D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
enum uint D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
enum uint D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
enum uint D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
enum uint D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
enum uint D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
enum uint D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
enum uint D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
enum uint D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
enum uint D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
enum uint D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
enum uint D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
enum uint D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
enum uint D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
enum uint D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
enum uint D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
enum uint D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
enum uint D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
enum uint D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
enum uint D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
enum uint D3D11_CS_4_X_THREAD_GROUP_MAX_X = 768;
enum uint D3D11_CS_4_X_THREAD_GROUP_MAX_Y = 768;
enum uint D3D11_CS_4_X_UAV_REGISTER_COUNT = 1;
enum uint D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
enum uint D3D11_CS_TGSM_REGISTER_COUNT = 8192;
enum uint D3D11_CS_TGSM_REGISTER_READS_PER_INST = 1;
enum uint D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
enum uint D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
enum uint D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
enum uint D3D11_CS_THREADGROUPID_REGISTER_COUNT = 1;
enum uint D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
enum uint D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
enum uint D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
enum uint D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
enum uint D3D11_CS_THREADID_REGISTER_COMPONENTS = 3;
enum uint D3D11_CS_THREADID_REGISTER_COUNT = 1;
enum uint D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
enum uint D3D11_CS_THREAD_GROUP_MAX_X = 1024;
enum uint D3D11_CS_THREAD_GROUP_MAX_Y = 1024;
enum uint D3D11_CS_THREAD_GROUP_MAX_Z = 64;
enum uint D3D11_CS_THREAD_GROUP_MIN_X = 1;
enum uint D3D11_CS_THREAD_GROUP_MIN_Y = 1;
enum uint D3D11_CS_THREAD_GROUP_MIN_Z = 1;
enum uint D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
enum uint D3D11_DEFAULT_DEPTH_BIAS = 0;
enum uint D3D11_DEFAULT_MAX_ANISOTROPY = 16;
enum uint D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
enum uint D3D11_DEFAULT_SAMPLE_MASK = 0xffffffff;
enum uint D3D11_DEFAULT_SCISSOR_ENDX = 0;
enum uint D3D11_DEFAULT_SCISSOR_ENDY = 0;
enum uint D3D11_DEFAULT_SCISSOR_STARTX = 0;
enum uint D3D11_DEFAULT_SCISSOR_STARTY = 0;
enum uint D3D11_DEFAULT_STENCIL_READ_MASK = 0xff;
enum uint D3D11_DEFAULT_STENCIL_REFERENCE = 0;
enum uint D3D11_DEFAULT_STENCIL_WRITE_MASK = 0xff;
enum uint D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
enum uint D3D11_DEFAULT_VIEWPORT_HEIGHT = 0;
enum uint D3D11_DEFAULT_VIEWPORT_TOPLEFTX = 0;
enum uint D3D11_DEFAULT_VIEWPORT_TOPLEFTY = 0;
enum uint D3D11_DEFAULT_VIEWPORT_WIDTH = 0;
enum uint D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum uint D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum uint D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
enum uint D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum uint D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum uint D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
enum uint D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
enum uint D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
enum uint D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
enum uint D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum uint D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum uint D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum uint D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum uint D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
enum uint D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
enum uint D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
enum uint D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
enum uint D3D11_DS_OUTPUT_REGISTER_COMPONENTS = 4;
enum uint D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_DS_OUTPUT_REGISTER_COUNT = 32;
enum uint D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
enum uint D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
enum uint D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum uint D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
enum uint D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
enum uint D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
enum uint D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
enum uint D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
enum uint D3D11_GS_INPUT_REGISTER_COMPONENTS = 4;
enum uint D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_GS_INPUT_REGISTER_COUNT = 32;
enum uint D3D11_GS_INPUT_REGISTER_READS_PER_INST = 2;
enum uint D3D11_GS_INPUT_REGISTER_READ_PORTS = 1;
enum uint D3D11_GS_INPUT_REGISTER_VERTICES = 32;
enum uint D3D11_GS_MAX_INSTANCE_COUNT = 32;
enum uint D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
enum uint D3D11_GS_OUTPUT_ELEMENTS = 32;
enum uint D3D11_GS_OUTPUT_REGISTER_COMPONENTS = 4;
enum uint D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_GS_OUTPUT_REGISTER_COUNT = 32;
enum uint D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
enum uint D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
enum uint D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
enum uint D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
enum uint D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
enum uint D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xFFFFFFFF;
enum uint D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum uint D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
enum uint D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum uint D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum uint D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
enum uint D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
enum uint D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
enum uint D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
enum uint D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
enum uint D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
enum uint D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
enum uint D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
enum uint D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 0xFFFFFFFF;
enum uint D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
enum uint D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
enum uint D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
enum uint D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
enum uint D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
enum uint D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
enum uint D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
enum uint D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
enum uint D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
enum uint D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
enum uint D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
enum uint D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
enum uint D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
enum uint D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
enum uint D3D11_IA_INSTANCE_ID_BIT_COUNT = 32;
enum uint D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
enum uint D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
enum uint D3D11_IA_PRIMITIVE_ID_BIT_COUNT = 32;
enum uint D3D11_IA_VERTEX_ID_BIT_COUNT = 32;
enum uint D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
enum uint D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
enum uint D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
enum uint D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 0xffffffff;
enum uint D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 0xffffffff;
enum uint D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 0xffffffff;
enum uint D3D11_KEEP_UNORDERED_ACCESS_VIEWS = 0xffffffff;
enum uint D3D11_MAJOR_VERSION = 11;
enum uint D3D11_MAX_MAXANISOTROPY = 16;
enum uint D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
enum uint D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
enum uint D3D11_MINOR_VERSION = 0;
enum uint D3D11_MIN_MAXANISOTROPY = 0;
enum uint D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
enum uint D3D11_MIP_LOD_RANGE_BIT_COUNT = 8;
enum uint D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
enum uint D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
enum uint D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum uint D3D11_PS_CS_UAV_REGISTER_COMPONENTS = 1;
enum uint D3D11_PS_CS_UAV_REGISTER_COUNT = 8;
enum uint D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
enum uint D3D11_PS_CS_UAV_REGISTER_READ_PORTS = 1;
enum uint D3D11_PS_FRONTFACING_DEFAULT_VALUE = 0xFFFFFFFF;
enum uint D3D11_PS_FRONTFACING_FALSE_VALUE = 0x00000000;
enum uint D3D11_PS_FRONTFACING_TRUE_VALUE = 0xFFFFFFFF;
enum uint D3D11_PS_INPUT_REGISTER_COMPONENTS = 4;
enum uint D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_PS_INPUT_REGISTER_COUNT = 32;
enum uint D3D11_PS_INPUT_REGISTER_READS_PER_INST = 2;
enum uint D3D11_PS_INPUT_REGISTER_READ_PORTS = 1;
enum uint D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
enum uint D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
enum uint D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
enum uint D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
enum uint D3D11_PS_OUTPUT_REGISTER_COMPONENTS = 4;
enum uint D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_PS_OUTPUT_REGISTER_COUNT = 8;
enum uint D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
enum uint D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
enum uint D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
enum uint D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum uint D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
enum uint D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
enum uint D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
enum uint D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
enum uint D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
enum uint D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
enum uint D3D11_REQ_MAXANISOTROPY = 16;
enum uint D3D11_REQ_MIP_LEVELS = 15;
enum uint D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
enum uint D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
enum uint D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
enum uint D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
enum uint D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
enum uint D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
enum uint D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
enum uint D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
enum uint D3D11_REQ_TEXTURE1D_U_DIMENSION = 16384;
enum uint D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
enum uint D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
enum uint D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
enum uint D3D11_REQ_TEXTURECUBE_DIMENSION = 16384;
enum uint D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
enum uint D3D11_SHADER_MAJOR_VERSION = 5;
enum uint D3D11_SHADER_MAX_INSTANCES = 65535;
enum uint D3D11_SHADER_MAX_INTERFACES = 253;
enum uint D3D11_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
enum uint D3D11_SHADER_MAX_TYPES = 65535;
enum uint D3D11_SHADER_MINOR_VERSION = 0;
enum uint D3D11_SHIFT_INSTRUCTION_PAD_VALUE = 0;
enum uint D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
enum uint D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
enum uint D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
enum uint D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
enum uint D3D11_SO_BUFFER_SLOT_COUNT = 4;
enum uint D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 0xffffffff;
enum uint D3D11_SO_NO_RASTERIZED_STREAM = 0xffffffff;
enum uint D3D11_SO_OUTPUT_COMPONENT_COUNT = 128;
enum uint D3D11_SO_STREAM_COUNT = 4;
enum uint D3D11_SPEC_DATE_DAY = 16;
enum uint D3D11_SPEC_DATE_MONTH = 05;
enum uint D3D11_SPEC_DATE_YEAR = 2011;
enum uint D3D11_STANDARD_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
enum uint D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
enum uint D3D11_STANDARD_PIXEL_COMPONENT_COUNT = 128;
enum uint D3D11_STANDARD_PIXEL_ELEMENT_COUNT = 32;
enum uint D3D11_STANDARD_VECTOR_SIZE = 4;
enum uint D3D11_STANDARD_VERTEX_ELEMENT_COUNT = 32;
enum uint D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
enum uint D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
enum uint D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
enum uint D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
enum uint D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
enum uint D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
enum uint D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
enum uint D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
enum uint D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
enum uint D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
enum uint D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
enum uint D3D11_UNBOUND_MEMORY_ACCESS_RESULT = 0;
enum uint D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
enum uint D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
enum uint D3D11_VIEWPORT_BOUNDS_MAX = 32767;
enum INT D3D11_VIEWPORT_BOUNDS_MIN = -32768;
enum uint D3D11_VS_INPUT_REGISTER_COMPONENTS = 4;
enum uint D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_VS_INPUT_REGISTER_COUNT = 32;
enum uint D3D11_VS_INPUT_REGISTER_READS_PER_INST = 2;
enum uint D3D11_VS_INPUT_REGISTER_READ_PORTS = 1;
enum uint D3D11_VS_OUTPUT_REGISTER_COMPONENTS = 4;
enum uint D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
enum uint D3D11_VS_OUTPUT_REGISTER_COUNT = 32;
enum uint D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
enum uint D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
enum uint D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
enum uint D3D11_1_UAV_SLOT_COUNT = 64;
enum uint D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
enum uint _FACD3D11 = 0x87c;
enum uint _FACD3D11DEBUG = _FACD3D11+1;
enum uint D3D11_APPEND_ALIGNED_ELEMENT = 0xffffffff;
enum uint D3D11_FILTER_REDUCTION_TYPE_MASK = 0x00000003;
enum uint D3D11_FILTER_REDUCTION_TYPE_SHIFT = 7;
enum uint D3D11_FILTER_TYPE_MASK = 0x00000003;
enum uint D3D11_MIN_FILTER_SHIFT = 4;
enum uint D3D11_MAG_FILTER_SHIFT = 2;
enum uint D3D11_MIP_FILTER_SHIFT = 0;
enum uint D3D11_COMPARISON_FILTERING_BIT = 0x00000080;
enum uint D3D11_ANISOTROPIC_FILTERING_BIT = 0x00000040;
enum uint D3D11_SDK_VERSION = 7;
enum uint D3D11_PACKED_TILE = 0xffffffff;
enum uint DXGI_RESOURCE_PRIORITY_MINIMUM = 0x28000000;
enum uint DXGI_RESOURCE_PRIORITY_LOW = 0x50000000;
enum uint DXGI_RESOURCE_PRIORITY_NORMAL = 0x78000000;
enum uint DXGI_RESOURCE_PRIORITY_HIGH = 0xa0000000;
enum uint DXGI_RESOURCE_PRIORITY_MAXIMUM = 0xc8000000;
enum uint DXGI_MAP_READ = 1UL;
enum uint DXGI_MAP_WRITE = 2UL;
enum uint DXGI_MAP_DISCARD = 4UL;
enum uint DXGI_ENUM_MODES_INTERLACED = 1UL;
enum uint DXGI_ENUM_MODES_SCALING = 2UL;

struct D3D_SHADER_MACRO
{
	LPCSTR Name;
	LPCSTR Definition;
}

struct D3D11_INPUT_ELEMENT_DESC
{
	LPCSTR SemanticName;
	uint SemanticIndex;
	DXGI_FORMAT Format;
	uint InputSlot;
	uint AlignedByteOffset;
	D3D11_INPUT_CLASSIFICATION InputSlotClass;
	uint InstanceDataStepRate;
}

struct D3D11_SO_DECLARATION_ENTRY
{
	uint Stream;
	LPCSTR SemanticName;
	uint SemanticIndex;
	ubyte StartComponent;
	ubyte ComponentCount;
	ubyte OutputSlot;
}

struct D3D11_VIEWPORT
{
	float TopLeftX;
	float TopLeftY;
	float Width;
	float Height;
	float MinDepth;
	float MaxDepth;
}

struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS
{
	uint VertexCountPerInstance;
	uint InstanceCount;
	uint StartVertexLocation;
	uint StartInstanceLocation;
}

struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
{
	uint IndexCountPerInstance;
	uint InstanceCount;
	uint StartIndexLocation;
	INT BaseVertexLocation;
	uint StartInstanceLocation;
}

struct D3D11_BOX
{
	uint left;
	uint top;
	uint front;
	uint right;
	uint bottom;
	uint back;
}

struct D3D11_DEPTH_STENCILOP_DESC
{
	D3D11_STENCIL_OP StencilFailOp;
	D3D11_STENCIL_OP StencilDepthFailOp;
	D3D11_STENCIL_OP StencilPassOp;
	D3D11_COMPARISON_FUNC StencilFunc;
}

struct D3D11_DEPTH_STENCIL_DESC
{
	bool DepthEnable;
	D3D11_DEPTH_WRITE_MASK DepthWriteMask;
	D3D11_COMPARISON_FUNC DepthFunc;
	bool StencilEnable;
	UINT8 StencilReadMask;
	UINT8 StencilWriteMask;
	D3D11_DEPTH_STENCILOP_DESC FrontFace;
	D3D11_DEPTH_STENCILOP_DESC BackFace;
}

struct D3D11_RENDER_TARGET_BLEND_DESC
{
	bool BlendEnable;
	D3D11_BLEND SrcBlend;
	D3D11_BLEND DestBlend;
	D3D11_BLEND_OP BlendOp;
	D3D11_BLEND SrcBlendAlpha;
	D3D11_BLEND DestBlendAlpha;
	D3D11_BLEND_OP BlendOpAlpha;
	UINT8 RenderTargetWriteMask;
}

struct D3D11_BLEND_DESC
{
	bool AlphaToCoverageEnable;
	bool IndependentBlendEnable;
	D3D11_RENDER_TARGET_BLEND_DESC RenderTarget;
}

struct D3D11_RASTERIZER_DESC
{
	D3D11_FILL_MODE FillMode;
	D3D11_CULL_MODE CullMode;
	bool FrontCounterClockwise;
	INT DepthBias;
	float DepthBiasClamp;
	float SlopeScaledDepthBias;
	bool DepthClipEnable;
	bool ScissorEnable;
	bool MultisampleEnable;
	bool AntialiasedLineEnable;
}

struct D3D11_SUBRESOURCE_DATA
{
	const(void)* pSysMem;
	uint SysMemPitch;
	uint SysMemSlicePitch;
}

struct D3D11_MAPPED_SUBRESOURCE
{
	void* pData;
	uint RowPitch;
	uint DepthPitch;
}

struct D3D11_BUFFER_DESC
{
	uint ByteWidth;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
	uint StructureByteStride;
}

struct D3D11_TEXTURE1D_DESC
{
	uint Width;
	uint MipLevels;
	uint ArraySize;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
}

struct D3D11_TEXTURE2D_DESC
{
	uint Width;
	uint Height;
	uint MipLevels;
	uint ArraySize;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
}

struct D3D11_TEXTURE3D_DESC
{
	uint Width;
	uint Height;
	uint Depth;
	uint MipLevels;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
}

struct D3D11_BUFFER_SRV
{
}

struct D3D11_BUFFEREX_SRV
{
	uint FirstElement;
	uint NumElements;
	uint Flags;
}

struct D3D11_TEX1D_SRV
{
	uint MostDetailedMip;
	uint MipLevels;
}

struct D3D11_TEX1D_ARRAY_SRV
{
	uint MostDetailedMip;
	uint MipLevels;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2D_SRV
{
	uint MostDetailedMip;
	uint MipLevels;
}

struct D3D11_TEX2D_ARRAY_SRV
{
	uint MostDetailedMip;
	uint MipLevels;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX3D_SRV
{
	uint MostDetailedMip;
	uint MipLevels;
}

struct D3D11_TEXCUBE_SRV
{
	uint MostDetailedMip;
	uint MipLevels;
}

struct D3D11_TEXCUBE_ARRAY_SRV
{
	uint MostDetailedMip;
	uint MipLevels;
	uint First2DArrayFace;
	uint NumCubes;
}

struct D3D11_TEX2DMS_SRV
{
	uint UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_SRV
{
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_SHADER_RESOURCE_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D_SRV_DIMENSION ViewDimension;
}

struct D3D11_BUFFER_RTV
{
}

struct D3D11_TEX1D_RTV
{
	uint MipSlice;
}

struct D3D11_TEX1D_ARRAY_RTV
{
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2D_RTV
{
	uint MipSlice;
}

struct D3D11_TEX2DMS_RTV
{
	uint UnusedField_NothingToDefine;
}

struct D3D11_TEX2D_ARRAY_RTV
{
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2DMS_ARRAY_RTV
{
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX3D_RTV
{
	uint MipSlice;
	uint FirstWSlice;
	uint WSize;
}

struct D3D11_RENDER_TARGET_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D11_RTV_DIMENSION ViewDimension;
}

struct D3D11_TEX1D_DSV
{
	uint MipSlice;
}

struct D3D11_TEX1D_ARRAY_DSV
{
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2D_DSV
{
	uint MipSlice;
}

struct D3D11_TEX2D_ARRAY_DSV
{
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2DMS_DSV
{
	uint UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_DSV
{
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_DEPTH_STENCIL_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D11_DSV_DIMENSION ViewDimension;
	uint Flags;
}

struct D3D11_BUFFER_UAV
{
	uint FirstElement;
	uint NumElements;
	uint Flags;
}

struct D3D11_TEX1D_UAV
{
	uint MipSlice;
}

struct D3D11_TEX1D_ARRAY_UAV
{
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX2D_UAV
{
	uint MipSlice;
}

struct D3D11_TEX2D_ARRAY_UAV
{
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_TEX3D_UAV
{
	uint MipSlice;
	uint FirstWSlice;
	uint WSize;
}

struct D3D11_UNORDERED_ACCESS_VIEW_DESC
{
	DXGI_FORMAT Format;
	D3D11_UAV_DIMENSION ViewDimension;
}

struct D3D11_SAMPLER_DESC
{
	D3D11_FILTER Filter;
	D3D11_TEXTURE_ADDRESS_MODE AddressU;
	D3D11_TEXTURE_ADDRESS_MODE AddressV;
	D3D11_TEXTURE_ADDRESS_MODE AddressW;
	float MipLODBias;
	uint MaxAnisotropy;
	D3D11_COMPARISON_FUNC ComparisonFunc;
	float BorderColor;
	float MinLOD;
	float MaxLOD;
}

struct D3D11_QUERY_DESC
{
	D3D11_QUERY Query;
	uint MiscFlags;
}

struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
{
	ulong Frequency;
	bool Disjoint;
}

struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
{
	ulong IAVertices;
	ulong IAPrimitives;
	ulong VSInvocations;
	ulong GSInvocations;
	ulong GSPrimitives;
	ulong CInvocations;
	ulong CPrimitives;
	ulong PSInvocations;
	ulong HSInvocations;
	ulong DSInvocations;
	ulong CSInvocations;
}

struct D3D11_QUERY_DATA_SO_STATISTICS
{
	ulong NumPrimitivesWritten;
	ulong PrimitivesStorageNeeded;
}

struct D3D11_COUNTER_DESC
{
	D3D11_COUNTER Counter;
	uint MiscFlags;
}

struct D3D11_COUNTER_INFO
{
	D3D11_COUNTER LastDeviceDependentCounter;
	uint NumSimultaneousCounters;
	UINT8 NumDetectableParallelUnits;
}

struct D3D11_CLASS_INSTANCE_DESC
{
	uint InstanceId;
	uint InstanceIndex;
	uint TypeId;
	uint ConstantBuffer;
	uint BaseConstantBufferOffset;
	uint BaseTexture;
	uint BaseSampler;
	bool Created;
}

struct D3D11_FEATURE_DATA_THREADING
{
	bool DriverConcurrentCreates;
	bool DriverCommandLists;
}

struct D3D11_FEATURE_DATA_DOUBLES
{
	bool DoublePrecisionFloatShaderOps;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
{
	DXGI_FORMAT InFormat;
	uint OutFormatSupport;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
{
	DXGI_FORMAT InFormat;
	uint OutFormatSupport2;
}

struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
{
	bool ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS
{
	bool OutputMergerLogicOp;
	bool UAVOnlyRenderingForcedSampleCount;
	bool DiscardAPIsSeenByDriver;
	bool FlagsForUpdateAndCopySeenByDriver;
	bool ClearView;
	bool CopyWithOverlap;
	bool ConstantBufferPartialUpdate;
	bool ConstantBufferOffsetting;
	bool MapNoOverwriteOnDynamicConstantBuffer;
	bool MapNoOverwriteOnDynamicBufferSRV;
	bool MultisampleRTVWithForcedSampleCountOne;
	bool SAD4ShaderInstructions;
	bool ExtendedDoublesShaderInstructions;
	bool ExtendedResourceSharing;
}

struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
{
	bool TileBasedDeferredRenderer;
}

struct D3D11_FEATURE_DATA_D3D9_OPTIONS
{
	bool FullNonPow2TextureSupport;
}

struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
{
	bool SupportsDepthAsTextureWithLessEqualComparisonFilter;
}

struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
{
	uint PixelShaderMinPrecision;
	uint AllOtherShaderStagesMinPrecision;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
{
	D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
	bool MinMaxFiltering;
	bool ClearViewAlsoSupportsDepthOnlyFormats;
	bool MapOnDefaultBuffers;
}

struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
{
	bool SimpleInstancingSupported;
}

struct D3D11_FEATURE_DATA_MARKER_SUPPORT
{
	bool Profile;
}

struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
{
	bool FullNonPow2TextureSupported;
	bool DepthAsTextureWithLessEqualComparisonFilterSupported;
	bool SimpleInstancingSupported;
	bool TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
{
	bool PSSpecifiedStencilRefSupported;
	bool TypedUAVLoadAdditionalFormats;
	bool ROVsSupported;
	D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
	D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
	bool MapOnDefaultTextures;
	bool StandardSwizzle;
	bool UnifiedMemoryArchitecture;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
{
	bool VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
}

struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
{
	uint MaxGPUVirtualAddressBitsPerResource;
	uint MaxGPUVirtualAddressBitsPerProcess;
}

struct D3D11_FEATURE_DATA_SHADER_CACHE
{
	uint SupportFlags;
}

struct D3D11_VIDEO_DECODER_DESC
{
	GUID Guid;
	uint SampleWidth;
	uint SampleHeight;
	DXGI_FORMAT OutputFormat;
}

struct D3D11_VIDEO_DECODER_CONFIG
{
	GUID guidConfigBitstreamEncryption;
	GUID guidConfigMBcontrolEncryption;
	GUID guidConfigResidDiffEncryption;
	uint ConfigBitstreamRaw;
	uint ConfigMBcontrolRasterOrder;
	uint ConfigResidDiffHost;
	uint ConfigSpatialResid8;
	uint ConfigResid8Subtraction;
	uint ConfigSpatialHost8or9Clipping;
	uint ConfigSpatialResidInterleaved;
	uint ConfigIntraResidUnsigned;
	uint ConfigResidDiffAccelerator;
	uint ConfigHostInverseScan;
	uint ConfigSpecificIDCT;
	uint Config4GroupedCoefs;
	ushort ConfigMinRenderTargetBuffCount;
	ushort ConfigDecoderSpecific;
}

struct D3D11_AES_CTR_IV
{
	ulong IV;
	ulong Count;
}

struct D3D11_ENCRYPTED_BLOCK_INFO
{
	uint NumEncryptedBytesAtBeginning;
	uint NumBytesInSkipPattern;
	uint NumBytesInEncryptPattern;
}

struct D3D11_VIDEO_DECODER_BUFFER_DESC
{
	D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
	uint BufferIndex;
	uint DataOffset;
	uint DataSize;
	uint FirstMBaddress;
	uint NumMBsInBuffer;
	uint Width;
	uint Height;
	uint Stride;
	uint ReservedBits;
	void* pIV;
	uint IVSize;
	bool PartialEncryption;
	D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
}

struct D3D11_VIDEO_DECODER_EXTENSION
{
	uint Function;
	void* pPrivateInputData;
	uint PrivateInputDataSize;
	void* pPrivateOutputData;
	uint PrivateOutputDataSize;
	uint ResourceCount;
	ID3D11Resource* ppResourceList;
}

struct D3D11_VIDEO_PROCESSOR_CAPS
{
	uint DeviceCaps;
	uint FeatureCaps;
	uint FilterCaps;
	uint InputFormatCaps;
	uint AutoStreamCaps;
	uint StereoCaps;
	uint RateConversionCapsCount;
	uint MaxInputStreams;
	uint MaxStreamStates;
}

struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
{
	uint PastFrames;
	uint FutureFrames;
	uint ProcessorCaps;
	uint ITelecineCaps;
	uint CustomRateCount;
}

struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
{
	uint Caps;
	uint KeyExchangeTypeCount;
	uint BlockAlignmentSize;
	ULONGLONG ProtectedMemorySize;
}

struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
{
	DXGI_RATIONAL CustomRate;
	uint OutputFrames;
	bool InputInterlaced;
	uint InputFramesOrFields;
}

struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
{
	int Minimum;
	int Maximum;
	int Default;
	float Multiplier;
}

struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
{
	D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
	DXGI_RATIONAL InputFrameRate;
	uint InputWidth;
	uint InputHeight;
	DXGI_RATIONAL OutputFrameRate;
	uint OutputWidth;
	uint OutputHeight;
	D3D11_VIDEO_USAGE Usage;
}

struct D3D11_VIDEO_COLOR_RGBA
{
	float R;
	float G;
	float B;
	float A;
}

struct D3D11_VIDEO_COLOR_YCbCrA
{
	float Y;
	float Cb;
	float Cr;
	float A;
}

struct D3D11_VIDEO_COLOR
{
}

struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
{
	uint Usage;
	uint RGB_Range;
	uint YCbCr_Matrix;
	uint YCbCr_xvYCC;
	uint Nominal_Range;
	uint Reserved;
}

struct D3D11_VIDEO_PROCESSOR_STREAM
{
	bool Enable;
	uint OutputIndex;
	uint InputFrameOrField;
	uint PastFrames;
	uint FutureFrames;
	ID3D11VideoProcessorInputView* ppPastSurfaces;
	ID3D11VideoProcessorInputView pInputSurface;
	ID3D11VideoProcessorInputView* ppFutureSurfaces;
	ID3D11VideoProcessorInputView* ppPastSurfacesRight;
	ID3D11VideoProcessorInputView pInputSurfaceRight;
	ID3D11VideoProcessorInputView* ppFutureSurfacesRight;
}

struct D3D11_OMAC
{
	ubyte Omac;
}

struct D3D11_AUTHENTICATED_QUERY_INPUT
{
	GUID QueryType;
	HANDLE hChannel;
	uint SequenceNumber;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT
{
	D3D11_OMAC omac;
	GUID QueryType;
	HANDLE hChannel;
	uint SequenceNumber;
	HRESULT ReturnCode;
}

struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
}

struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
}

struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
{
	D3D11_AUTHENTICATED_QUERY_INPUT Input;
	HANDLE DecoderHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	HANDLE DecoderHandle;
	HANDLE CryptoSessionHandle;
	HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	uint RestrictedSharedResourceProcessCount;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
{
	D3D11_AUTHENTICATED_QUERY_INPUT Input;
	uint ProcessIndex;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	uint ProcessIndex;
	D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
	HANDLE ProcessHandle;
}

struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	uint UnrestrictedProtectedSharedResourceCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
{
	D3D11_AUTHENTICATED_QUERY_INPUT Input;
	HANDLE DeviceHandle;
	HANDLE CryptoSessionHandle;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	HANDLE DeviceHandle;
	HANDLE CryptoSessionHandle;
	uint OutputIDCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
{
	D3D11_AUTHENTICATED_QUERY_INPUT Input;
	HANDLE DeviceHandle;
	HANDLE CryptoSessionHandle;
	uint OutputIDIndex;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	HANDLE DeviceHandle;
	HANDLE CryptoSessionHandle;
	uint OutputIDIndex;
	ulong OutputID;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	D3D11_BUS_TYPE BusType;
	bool AccessibleInContiguousBlocks;
	bool AccessibleInNonContiguousBlocks;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	uint EncryptionGuidCount;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
{
	D3D11_AUTHENTICATED_QUERY_INPUT Input;
	uint EncryptionGuidIndex;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	uint EncryptionGuidIndex;
	GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
{
	D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
	GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
{
	D3D11_OMAC omac;
	GUID ConfigureType;
	HANDLE hChannel;
	uint SequenceNumber;
}

struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
{
	D3D11_OMAC omac;
	GUID ConfigureType;
	HANDLE hChannel;
	uint SequenceNumber;
	HRESULT ReturnCode;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
{
	D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
	uint StartSequenceQuery;
	uint StartSequenceConfigure;
}

struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
{
	D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
	D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
}

struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
{
	D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
	HANDLE DecoderHandle;
	HANDLE CryptoSessionHandle;
	HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
{
	D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
	D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
	HANDLE ProcessHandle;
	bool AllowAccess;
}

struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
{
	D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
	GUID EncryptionGuid;
}

struct D3D11_TEX2D_VDOV
{
	uint ArraySlice;
}

struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
{
	GUID DecodeProfile;
	D3D11_VDOV_DIMENSION ViewDimension;
}

struct D3D11_TEX2D_VPIV
{
	uint MipSlice;
	uint ArraySlice;
}

struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
{
	uint FourCC;
	D3D11_VPIV_DIMENSION ViewDimension;
}

struct D3D11_TEX2D_VPOV
{
	uint MipSlice;
}

struct D3D11_TEX2D_ARRAY_VPOV
{
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
}

struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
{
	D3D11_VPOV_DIMENSION ViewDimension;
}

struct D3D11_RENDER_TARGET_BLEND_DESC1
{
	bool BlendEnable;
	bool LogicOpEnable;
	D3D11_BLEND SrcBlend;
	D3D11_BLEND DestBlend;
	D3D11_BLEND_OP BlendOp;
	D3D11_BLEND SrcBlendAlpha;
	D3D11_BLEND DestBlendAlpha;
	D3D11_BLEND_OP BlendOpAlpha;
	D3D11_LOGIC_OP LogicOp;
	UINT8 RenderTargetWriteMask;
}

struct D3D11_BLEND_DESC1
{
	bool AlphaToCoverageEnable;
	bool IndependentBlendEnable;
	D3D11_RENDER_TARGET_BLEND_DESC1 RenderTarget;
}

struct D3D11_RASTERIZER_DESC1
{
	D3D11_FILL_MODE FillMode;
	D3D11_CULL_MODE CullMode;
	bool FrontCounterClockwise;
	INT DepthBias;
	float DepthBiasClamp;
	float SlopeScaledDepthBias;
	bool DepthClipEnable;
	bool ScissorEnable;
	bool MultisampleEnable;
	bool AntialiasedLineEnable;
	uint ForcedSampleCount;
}

struct D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK
{
	uint ClearSize;
	uint EncryptedSize;
}

struct D3D11_VIDEO_DECODER_BUFFER_DESC1
{
	D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
	uint DataOffset;
	uint DataSize;
	void* pIV;
	uint IVSize;
	D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK* pSubSampleMappingBlock;
	uint SubSampleMappingCount;
}

struct D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION
{
	ID3D11CryptoSession pCryptoSession;
	uint BlobSize;
	void* pBlob;
	GUID* pKeyInfoId;
	uint PrivateDataSize;
	void* pPrivateData;
}

struct D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT
{
	bool Enable;
	uint Width;
	uint Height;
	DXGI_FORMAT Format;
}

struct D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA
{
	uint PrivateDataSize;
	uint HWProtectionDataSize;
	ubyte pbInput;
}

struct D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA
{
	uint PrivateDataSize;
	uint MaxHWProtectionDataSize;
	uint HWProtectionDataSize;
	ulong TransportTime;
	ulong ExecutionTime;
	ubyte pbOutput;
}

struct D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA
{
	uint HWProtectionFunctionID;
	D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA* pInputData;
	D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA* pOutputData;
	HRESULT Status;
}

struct D3D11_VIDEO_SAMPLE_DESC
{
	uint Width;
	uint Height;
	DXGI_FORMAT Format;
	DXGI_COLOR_SPACE_TYPE ColorSpace;
}

struct D3D11_TILED_RESOURCE_COORDINATE
{
	uint X;
	uint Y;
	uint Z;
	uint Subresource;
}

struct D3D11_TILE_REGION_SIZE
{
	uint NumTiles;
	bool bUseBox;
	uint Width;
	UINT16 Height;
	UINT16 Depth;
}

struct D3D11_SUBRESOURCE_TILING
{
	uint WidthInTiles;
	UINT16 HeightInTiles;
	UINT16 DepthInTiles;
	uint StartTileIndexInOverallResource;
}

struct D3D11_TILE_SHAPE
{
	uint WidthInTexels;
	uint HeightInTexels;
	uint DepthInTexels;
}

struct D3D11_PACKED_MIP_DESC
{
	UINT8 NumStandardMips;
	UINT8 NumPackedMips;
	uint NumTilesForPackedMips;
	uint StartTileIndexInOverallResource;
}

struct D3D11_TEXTURE2D_DESC1
{
	uint Width;
	uint Height;
	uint MipLevels;
	uint ArraySize;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
	D3D11_TEXTURE_LAYOUT TextureLayout;
}

struct D3D11_TEXTURE3D_DESC1
{
	uint Width;
	uint Height;
	uint Depth;
	uint MipLevels;
	DXGI_FORMAT Format;
	D3D11_USAGE Usage;
	uint BindFlags;
	uint CPUAccessFlags;
	uint MiscFlags;
	D3D11_TEXTURE_LAYOUT TextureLayout;
}

struct D3D11_RASTERIZER_DESC2
{
	D3D11_FILL_MODE FillMode;
	D3D11_CULL_MODE CullMode;
	bool FrontCounterClockwise;
	INT DepthBias;
	float DepthBiasClamp;
	float SlopeScaledDepthBias;
	bool DepthClipEnable;
	bool ScissorEnable;
	bool MultisampleEnable;
	bool AntialiasedLineEnable;
	uint ForcedSampleCount;
	D3D11_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
}

struct D3D11_TEX2D_SRV1
{
	uint MostDetailedMip;
	uint MipLevels;
	uint PlaneSlice;
}

struct D3D11_TEX2D_ARRAY_SRV1
{
	uint MostDetailedMip;
	uint MipLevels;
	uint FirstArraySlice;
	uint ArraySize;
	uint PlaneSlice;
}

struct D3D11_SHADER_RESOURCE_VIEW_DESC1
{
	DXGI_FORMAT Format;
	D3D_SRV_DIMENSION ViewDimension;
}

struct D3D11_TEX2D_RTV1
{
	uint MipSlice;
	uint PlaneSlice;
}

struct D3D11_TEX2D_ARRAY_RTV1
{
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
	uint PlaneSlice;
}

struct D3D11_RENDER_TARGET_VIEW_DESC1
{
	DXGI_FORMAT Format;
	D3D11_RTV_DIMENSION ViewDimension;
}

struct D3D11_TEX2D_UAV1
{
	uint MipSlice;
	uint PlaneSlice;
}

struct D3D11_TEX2D_ARRAY_UAV1
{
	uint MipSlice;
	uint FirstArraySlice;
	uint ArraySize;
	uint PlaneSlice;
}

struct D3D11_UNORDERED_ACCESS_VIEW_DESC1
{
	DXGI_FORMAT Format;
	D3D11_UAV_DIMENSION ViewDimension;
}

struct D3D11_QUERY_DESC1
{
	D3D11_QUERY Query;
	uint MiscFlags;
	D3D11_CONTEXT_TYPE ContextType;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS4
{
	bool ExtendedNV12SharedTextureSupported;
}

struct DXGI_FRAME_STATISTICS
{
	uint PresentCount;
	uint PresentRefreshCount;
	uint SyncRefreshCount;
	LARGE_INTEGER SyncQPCTime;
	LARGE_INTEGER SyncGPUTime;
}

struct DXGI_MAPPED_RECT
{
	INT Pitch;
	ubyte* pBits;
}

struct LUID
{
	DWORD LowPart;
	LONG HighPart;
}

struct DXGI_ADAPTER_DESC
{
	wchar Description;
	uint VendorId;
	uint DeviceId;
	uint SubSysId;
	uint Revision;
	size_t DedicatedVideoMemory;
	size_t DedicatedSystemMemory;
	size_t SharedSystemMemory;
	LUID AdapterLuid;
}

struct DXGI_OUTPUT_DESC
{
	wchar DeviceName;
	RECT DesktopCoordinates;
	bool AttachedToDesktop;
	DXGI_MODE_ROTATION Rotation;
	HANDLE Monitor;
}

struct DXGI_SHARED_RESOURCE
{
	HANDLE Handle;
}

struct DXGI_SURFACE_DESC
{
	uint Width;
	uint Height;
	DXGI_FORMAT Format;
	DXGI_SAMPLE_DESC SampleDesc;
}

struct DXGI_SWAP_CHAIN_DESC
{
	DXGI_MODE_DESC BufferDesc;
	DXGI_SAMPLE_DESC SampleDesc;
	uint BufferUsage;
	uint BufferCount;
	HWND OutputWindow;
	bool Windowed;
	DXGI_SWAP_EFFECT SwapEffect;
	uint Flags;
}

struct DXGI_ADAPTER_DESC1
{
	wchar Description;
	uint VendorId;
	uint DeviceId;
	uint SubSysId;
	uint Revision;
	size_t DedicatedVideoMemory;
	size_t DedicatedSystemMemory;
	size_t SharedSystemMemory;
	LUID AdapterLuid;
	uint Flags;
}

struct DXGI_DISPLAY_COLOR_SPACE
{
	float PrimaryCoordinates;
	float WhitePoints;
}

struct DXGI_RATIONAL
{
	uint Numerator;
	uint Denominator;
}

struct DXGI_SAMPLE_DESC
{
	uint Count;
	uint Quality;
}

struct DXGI_RGB
{
	float Red;
	float Green;
	float Blue;
}

struct D3DCOLORVALUE
{
	float r;
	float g;
	float b;
	float a;
}

struct DXGI_GAMMA_CONTROL
{
	DXGI_RGB Scale;
	DXGI_RGB Offset;
	DXGI_RGB GammaCurve;
}

struct DXGI_GAMMA_CONTROL_CAPABILITIES
{
	bool ScaleAndOffsetSupported;
	float MaxConvertedValue;
	float MinConvertedValue;
	uint NumGammaControlPoints;
	float ControlPointPositions;
}

struct DXGI_MODE_DESC
{
	uint Width;
	uint Height;
	DXGI_RATIONAL RefreshRate;
	DXGI_FORMAT Format;
	DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
	DXGI_MODE_SCALING Scaling;
}

struct DXGI_JPEG_DC_HUFFMAN_TABLE
{
	ubyte CodeCounts;
	ubyte CodeValues;
}

struct DXGI_JPEG_AC_HUFFMAN_TABLE
{
	ubyte CodeCounts;
	ubyte CodeValues;
}

struct DXGI_JPEG_QUANTIZATION_TABLE
{
	ubyte Elements;
}

@uuid("8ba5fb08-5195-40e2-ac58-0d989c3a0102")
interface ID3D10Blob : IUnknown
{
extern(Windows):
	void* GetBufferPointer();
	size_t GetBufferSize();
}

@uuid("a06eb39a-50da-425b-8c31-4eecd6c270f3")
interface ID3DDestructionNotifier : IUnknown
{
extern(Windows):
	HRESULT RegisterDestructionCallback(PFN_DESTRUCTION_CALLBACK callbackFn, void* pData, uint* pCallbackID);
	HRESULT UnregisterDestructionCallback(uint callbackID);
}

@uuid("1841e5c8-16b0-489b-bcc8-44cfb0d5deae")
interface ID3D11DeviceChild : IUnknown
{
extern(Windows):
	void GetDevice(ID3D11Device* ppDevice);
	HRESULT GetPrivateData(REFGUID guid, uint* pDataSize, void* pData);
	HRESULT SetPrivateData(REFGUID guid, uint DataSize, const(void)* pData);
	HRESULT SetPrivateDataInterface(REFGUID guid, const(IUnknown) pData);
}

@uuid("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1")
interface ID3D11DepthStencilState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_DESC* pDesc);
}

@uuid("75b68faa-347d-4159-8f45-a0640f01cd9a")
interface ID3D11BlendState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_BLEND_DESC* pDesc);
}

@uuid("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7")
interface ID3D11RasterizerState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_RASTERIZER_DESC* pDesc);
}

@uuid("dc8e63f3-d12b-4952-b47b-5e45026a862d")
interface ID3D11Resource : ID3D11DeviceChild
{
extern(Windows):
	void GetType(D3D11_RESOURCE_DIMENSION* pResourceDimension);
	void SetEvictionPriority(uint EvictionPriority);
	uint GetEvictionPriority();
}

@uuid("48570b85-d1ee-4fcd-a250-eb350722b037")
interface ID3D11Buffer : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_BUFFER_DESC* pDesc);
}

@uuid("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c")
interface ID3D11Texture1D : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_TEXTURE1D_DESC* pDesc);
}

@uuid("6f15aaf2-d208-4e89-9ab4-489535d34f9c")
interface ID3D11Texture2D : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_TEXTURE2D_DESC* pDesc);
}

@uuid("037e866e-f56d-4357-a8af-9dabbe6e250e")
interface ID3D11Texture3D : ID3D11Resource
{
extern(Windows):
	void GetDesc(D3D11_TEXTURE3D_DESC* pDesc);
}

@uuid("839d1216-bb2e-412b-b7f4-a9dbebe08ed1")
interface ID3D11View : ID3D11DeviceChild
{
extern(Windows):
	void GetResource(ID3D11Resource* ppResource);
}

@uuid("b0e06fe0-8192-4e1a-b1ca-36d7414710b2")
interface ID3D11ShaderResourceView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_SHADER_RESOURCE_VIEW_DESC* pDesc);
}

@uuid("dfdba067-0b8d-4865-875b-d7b4516cc164")
interface ID3D11RenderTargetView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_RENDER_TARGET_VIEW_DESC* pDesc);
}

@uuid("9fdac92a-1876-48c3-afad-25b94f84a9b6")
interface ID3D11DepthStencilView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_DEPTH_STENCIL_VIEW_DESC* pDesc);
}

@uuid("28acf509-7f5c-48f6-8611-f316010a6380")
interface ID3D11UnorderedAccessView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_UNORDERED_ACCESS_VIEW_DESC* pDesc);
}

@uuid("3b301d64-d678-4289-8897-22f8928b72f3")
interface ID3D11VertexShader : ID3D11DeviceChild
{
}

@uuid("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd")
interface ID3D11HullShader : ID3D11DeviceChild
{
}

@uuid("f582c508-0f36-490c-9977-31eece268cfa")
interface ID3D11DomainShader : ID3D11DeviceChild
{
}

@uuid("38325b96-effb-4022-ba02-2e795b70275c")
interface ID3D11GeometryShader : ID3D11DeviceChild
{
}

@uuid("ea82e40d-51dc-4f33-93d4-db7c9125ae8c")
interface ID3D11PixelShader : ID3D11DeviceChild
{
}

@uuid("4f5b196e-c2bd-495e-bd01-1fded38e4969")
interface ID3D11ComputeShader : ID3D11DeviceChild
{
}

@uuid("e4819ddc-4cf0-4025-bd26-5de82a3e07b7")
interface ID3D11InputLayout : ID3D11DeviceChild
{
}

@uuid("da6fea51-564c-4487-9810-f0d0f9b4e3a5")
interface ID3D11SamplerState : ID3D11DeviceChild
{
extern(Windows):
	void GetDesc(D3D11_SAMPLER_DESC* pDesc);
}

@uuid("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b")
interface ID3D11Asynchronous : ID3D11DeviceChild
{
extern(Windows):
	uint GetDataSize();
}

@uuid("d6c00747-87b7-425e-b84d-44d108560afd")
interface ID3D11Query : ID3D11Asynchronous
{
extern(Windows):
	void GetDesc(D3D11_QUERY_DESC* pDesc);
}

@uuid("9eb576dd-9f77-4d86-81aa-8bab5fe490e2")
interface ID3D11Predicate : ID3D11Query
{
}

@uuid("6e8c49fb-a371-4770-b440-29086022b741")
interface ID3D11Counter : ID3D11Asynchronous
{
extern(Windows):
	void GetDesc(D3D11_COUNTER_DESC* pDesc);
}

@uuid("a6cd7faa-b0b7-4a2f-9436-8662a65797cb")
interface ID3D11ClassInstance : ID3D11DeviceChild
{
extern(Windows):
	void GetClassLinkage(ID3D11ClassLinkage* ppLinkage);
	void GetDesc(D3D11_CLASS_INSTANCE_DESC* pDesc);
	void GetInstanceName(LPSTR pInstanceName, size_t* pBufferLength);
	void GetTypeName(LPSTR pTypeName, size_t* pBufferLength);
}

@uuid("ddf57cba-9543-46e4-a12b-f207a0fe7fed")
interface ID3D11ClassLinkage : ID3D11DeviceChild
{
extern(Windows):
	HRESULT GetClassInstance(LPCSTR pClassInstanceName, uint InstanceIndex, ID3D11ClassInstance* ppInstance);
	HRESULT CreateClassInstance(LPCSTR pClassTypeName, uint ConstantBufferOffset, uint ConstantVectorOffset, uint TextureOffset, uint SamplerOffset, ID3D11ClassInstance* ppInstance);
}

@uuid("a24bc4d1-769e-43f7-8013-98ff566c18e2")
interface ID3D11CommandList : ID3D11DeviceChild
{
extern(Windows):
	uint GetContextFlags();
}

@uuid("c0bfa96c-e089-44fb-8eaf-26f8796190da")
interface ID3D11DeviceContext : ID3D11DeviceChild
{
extern(Windows):
	void VSSetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void PSSetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void PSSetShader(ID3D11PixelShader pPixelShader, ID3D11ClassInstance* ppClassInstances, uint NumClassInstances);
	void PSSetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void VSSetShader(ID3D11VertexShader pVertexShader, ID3D11ClassInstance* ppClassInstances, uint NumClassInstances);
	void DrawIndexed(uint IndexCount, uint StartIndexLocation, INT BaseVertexLocation);
	void Draw(uint VertexCount, uint StartVertexLocation);
	HRESULT Map(ID3D11Resource pResource, uint Subresource, D3D11_MAP MapType, uint MapFlags, D3D11_MAPPED_SUBRESOURCE* pMappedResource);
	void Unmap(ID3D11Resource pResource, uint Subresource);
	void PSSetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void IASetInputLayout(ID3D11InputLayout pInputLayout);
	void IASetVertexBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppVertexBuffers, const(uint)* pStrides, const(uint)* pOffsets);
	void IASetIndexBuffer(ID3D11Buffer pIndexBuffer, DXGI_FORMAT Format, uint Offset);
	void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, INT BaseVertexLocation, uint StartInstanceLocation);
	void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
	void GSSetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void GSSetShader(ID3D11GeometryShader pShader, ID3D11ClassInstance* ppClassInstances, uint NumClassInstances);
	void IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY Topology);
	void VSSetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void VSSetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void Begin(ID3D11Asynchronous pAsync);
	void End(ID3D11Asynchronous pAsync);
	HRESULT GetData(ID3D11Asynchronous pAsync, void* pData, uint DataSize, uint GetDataFlags);
	void SetPredication(ID3D11Predicate pPredicate, bool PredicateValue);
	void GSSetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void GSSetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void OMSetRenderTargets(uint NumViews, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView);
	void OMSetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView pDepthStencilView, uint UAVStartSlot, uint NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews, const(uint)* pUAVInitialCounts);
	void OMSetBlendState(ID3D11BlendState pBlendState, const(FLOAT[4]) BlendFactor, uint SampleMask);
	void OMSetDepthStencilState(ID3D11DepthStencilState pDepthStencilState, uint StencilRef);
	void SOSetTargets(uint NumBuffers, ID3D11Buffer* ppSOTargets, const(uint)* pOffsets);
	void DrawAuto();
	void DrawIndexedInstancedIndirect(ID3D11Buffer pBufferForArgs, uint AlignedByteOffsetForArgs);
	void DrawInstancedIndirect(ID3D11Buffer pBufferForArgs, uint AlignedByteOffsetForArgs);
	void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);
	void DispatchIndirect(ID3D11Buffer pBufferForArgs, uint AlignedByteOffsetForArgs);
	void RSSetState(ID3D11RasterizerState pRasterizerState);
	void RSSetViewports(uint NumViewports, const(D3D11_VIEWPORT)* pViewports);
	void RSSetScissorRects(uint NumRects, const(RECT)* pRects);
	void CopySubresourceRegion(ID3D11Resource pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, ID3D11Resource pSrcResource, uint SrcSubresource, const(D3D11_BOX)* pSrcBox);
	void CopyResource(ID3D11Resource pDstResource, ID3D11Resource pSrcResource);
	void UpdateSubresource(ID3D11Resource pDstResource, uint DstSubresource, const(D3D11_BOX)* pDstBox, const(void)* pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
	void CopyStructureCount(ID3D11Buffer pDstBuffer, uint DstAlignedByteOffset, ID3D11UnorderedAccessView pSrcView);
	void ClearRenderTargetView(ID3D11RenderTargetView pRenderTargetView, const(FLOAT[4]) ColorRGBA);
	void ClearUnorderedAccessViewUint(ID3D11UnorderedAccessView pUnorderedAccessView, const(UINT[4]) Values);
	void ClearUnorderedAccessViewFloat(ID3D11UnorderedAccessView pUnorderedAccessView, const(FLOAT[4]) Values);
	void ClearDepthStencilView(ID3D11DepthStencilView pDepthStencilView, uint ClearFlags, float Depth, UINT8 Stencil);
	void GenerateMips(ID3D11ShaderResourceView pShaderResourceView);
	void SetResourceMinLOD(ID3D11Resource pResource, float MinLOD);
	float GetResourceMinLOD(ID3D11Resource pResource);
	void ResolveSubresource(ID3D11Resource pDstResource, uint DstSubresource, ID3D11Resource pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
	void ExecuteCommandList(ID3D11CommandList pCommandList, bool RestoreContextState);
	void HSSetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void HSSetShader(ID3D11HullShader pHullShader, ID3D11ClassInstance* ppClassInstances, uint NumClassInstances);
	void HSSetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void HSSetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void DSSetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void DSSetShader(ID3D11DomainShader pDomainShader, ID3D11ClassInstance* ppClassInstances, uint NumClassInstances);
	void DSSetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void DSSetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void CSSetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void CSSetUnorderedAccessViews(uint StartSlot, uint NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews, const(uint)* pUAVInitialCounts);
	void CSSetShader(ID3D11ComputeShader pComputeShader, ID3D11ClassInstance* ppClassInstances, uint NumClassInstances);
	void CSSetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void CSSetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void VSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void PSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void PSGetShader(ID3D11PixelShader* ppPixelShader, ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances);
	void PSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void VSGetShader(ID3D11VertexShader* ppVertexShader, ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances);
	void PSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void IAGetInputLayout(ID3D11InputLayout* ppInputLayout);
	void IAGetVertexBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppVertexBuffers, uint* pStrides, uint* pOffsets);
	void IAGetIndexBuffer(ID3D11Buffer* pIndexBuffer, DXGI_FORMAT* Format, uint* Offset);
	void GSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void GSGetShader(ID3D11GeometryShader* ppGeometryShader, ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances);
	void IAGetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY* pTopology);
	void VSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void VSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void GetPredication(ID3D11Predicate* ppPredicate, bool* pPredicateValue);
	void GSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void GSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void OMGetRenderTargets(uint NumViews, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* ppDepthStencilView);
	void OMGetRenderTargetsAndUnorderedAccessViews(uint NumRTVs, ID3D11RenderTargetView* ppRenderTargetViews, ID3D11DepthStencilView* ppDepthStencilView, uint UAVStartSlot, uint NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews);
	void OMGetBlendState(ID3D11BlendState* ppBlendState, FLOAT[4] BlendFactor, uint* pSampleMask);
	void OMGetDepthStencilState(ID3D11DepthStencilState* ppDepthStencilState, uint* pStencilRef);
	void SOGetTargets(uint NumBuffers, ID3D11Buffer* ppSOTargets);
	void RSGetState(ID3D11RasterizerState* ppRasterizerState);
	void RSGetViewports(uint* pNumViewports, D3D11_VIEWPORT* pViewports);
	void RSGetScissorRects(uint* pNumRects, RECT* pRects);
	void HSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void HSGetShader(ID3D11HullShader* ppHullShader, ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances);
	void HSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void HSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void DSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void DSGetShader(ID3D11DomainShader* ppDomainShader, ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances);
	void DSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void DSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void CSGetShaderResources(uint StartSlot, uint NumViews, ID3D11ShaderResourceView* ppShaderResourceViews);
	void CSGetUnorderedAccessViews(uint StartSlot, uint NumUAVs, ID3D11UnorderedAccessView* ppUnorderedAccessViews);
	void CSGetShader(ID3D11ComputeShader* ppComputeShader, ID3D11ClassInstance* ppClassInstances, uint* pNumClassInstances);
	void CSGetSamplers(uint StartSlot, uint NumSamplers, ID3D11SamplerState* ppSamplers);
	void CSGetConstantBuffers(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers);
	void ClearState();
	void Flush();
	D3D11_DEVICE_CONTEXT_TYPE GetType();
	uint GetContextFlags();
	HRESULT FinishCommandList(bool RestoreDeferredContextState, ID3D11CommandList* ppCommandList);
}

@uuid("3c9c5b51-995d-48d1-9b8d-fa5caeded65c")
interface ID3D11VideoDecoder : ID3D11DeviceChild
{
extern(Windows):
	HRESULT GetCreationParameters(D3D11_VIDEO_DECODER_DESC* pVideoDesc, D3D11_VIDEO_DECODER_CONFIG* pConfig);
	HRESULT GetDriverHandle(HANDLE* pDriverHandle);
}

@uuid("31627037-53ab-4200-9061-05faa9ab45f9")
interface ID3D11VideoProcessorEnumerator : ID3D11DeviceChild
{
extern(Windows):
	HRESULT GetVideoProcessorContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC* pContentDesc);
	HRESULT CheckVideoProcessorFormat(DXGI_FORMAT Format, uint* pFlags);
	HRESULT GetVideoProcessorCaps(D3D11_VIDEO_PROCESSOR_CAPS* pCaps);
	HRESULT GetVideoProcessorRateConversionCaps(uint TypeIndex, D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS* pCaps);
	HRESULT GetVideoProcessorCustomRate(uint TypeIndex, uint CustomRateIndex, D3D11_VIDEO_PROCESSOR_CUSTOM_RATE* pRate);
	HRESULT GetVideoProcessorFilterRange(D3D11_VIDEO_PROCESSOR_FILTER Filter, D3D11_VIDEO_PROCESSOR_FILTER_RANGE* pRange);
}

@uuid("1d7b0652-185f-41c6-85ce-0c5be3d4ae6c")
interface ID3D11VideoProcessor : ID3D11DeviceChild
{
extern(Windows):
	void GetContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC* pDesc);
	void GetRateConversionCaps(D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS* pCaps);
}

@uuid("3015a308-dcbd-47aa-a747-192486d14d4a")
interface ID3D11AuthenticatedChannel : ID3D11DeviceChild
{
extern(Windows):
	HRESULT GetCertificateSize(uint* pCertificateSize);
	HRESULT GetCertificate(uint CertificateSize, ubyte* pCertificate);
	void GetChannelHandle(HANDLE* pChannelHandle);
}

@uuid("9b32f9ad-bdcc-40a6-a39d-d5c865845720")
interface ID3D11CryptoSession : ID3D11DeviceChild
{
extern(Windows):
	void GetCryptoType(GUID* pCryptoType);
	void GetDecoderProfile(GUID* pDecoderProfile);
	HRESULT GetCertificateSize(uint* pCertificateSize);
	HRESULT GetCertificate(uint CertificateSize, ubyte* pCertificate);
	void GetCryptoSessionHandle(HANDLE* pCryptoSessionHandle);
}

@uuid("c2931aea-2a85-4f20-860f-fba1fd256e18")
interface ID3D11VideoDecoderOutputView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC* pDesc);
}

@uuid("11ec5a5f-51dc-4945-ab34-6e8c21300ea5")
interface ID3D11VideoProcessorInputView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC* pDesc);
}

@uuid("a048285e-25a9-4527-bd93-d68b68c44254")
interface ID3D11VideoProcessorOutputView : ID3D11View
{
extern(Windows):
	void GetDesc(D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC* pDesc);
}

@uuid("61f21c45-3c0e-4a74-9cea-67100d9ad5e4")
interface ID3D11VideoContext : ID3D11DeviceChild
{
extern(Windows):
	HRESULT GetDecoderBuffer(ID3D11VideoDecoder pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type, uint* pBufferSize, void** ppBuffer);
	HRESULT ReleaseDecoderBuffer(ID3D11VideoDecoder pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type);
	HRESULT DecoderBeginFrame(ID3D11VideoDecoder pDecoder, ID3D11VideoDecoderOutputView pView, uint ContentKeySize, const(void)* pContentKey);
	HRESULT DecoderEndFrame(ID3D11VideoDecoder pDecoder);
	HRESULT SubmitDecoderBuffers(ID3D11VideoDecoder pDecoder, uint NumBuffers, const(D3D11_VIDEO_DECODER_BUFFER_DESC)* pBufferDesc);
	HRESULT DecoderExtension(ID3D11VideoDecoder pDecoder, const(D3D11_VIDEO_DECODER_EXTENSION)* pExtensionData);
	void VideoProcessorSetOutputTargetRect(ID3D11VideoProcessor pVideoProcessor, bool Enable, const(RECT)* pRect);
	void VideoProcessorSetOutputBackgroundColor(ID3D11VideoProcessor pVideoProcessor, bool YCbCr, const(D3D11_VIDEO_COLOR)* pColor);
	void VideoProcessorSetOutputColorSpace(ID3D11VideoProcessor pVideoProcessor, const(D3D11_VIDEO_PROCESSOR_COLOR_SPACE)* pColorSpace);
	void VideoProcessorSetOutputAlphaFillMode(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode, uint StreamIndex);
	void VideoProcessorSetOutputConstriction(ID3D11VideoProcessor pVideoProcessor, bool Enable, SIZE Size);
	void VideoProcessorSetOutputStereoMode(ID3D11VideoProcessor pVideoProcessor, bool Enable);
	HRESULT VideoProcessorSetOutputExtension(ID3D11VideoProcessor pVideoProcessor, const(GUID)* pExtensionGuid, uint DataSize, void* pData);
	void VideoProcessorGetOutputTargetRect(ID3D11VideoProcessor pVideoProcessor, bool* Enabled, RECT* pRect);
	void VideoProcessorGetOutputBackgroundColor(ID3D11VideoProcessor pVideoProcessor, bool* pYCbCr, D3D11_VIDEO_COLOR* pColor);
	void VideoProcessorGetOutputColorSpace(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace);
	void VideoProcessorGetOutputAlphaFillMode(ID3D11VideoProcessor pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE* pAlphaFillMode, uint* pStreamIndex);
	void VideoProcessorGetOutputConstriction(ID3D11VideoProcessor pVideoProcessor, bool* pEnabled, SIZE* pSize);
	void VideoProcessorGetOutputStereoMode(ID3D11VideoProcessor pVideoProcessor, bool* pEnabled);
	HRESULT VideoProcessorGetOutputExtension(ID3D11VideoProcessor pVideoProcessor, const(GUID)* pExtensionGuid, uint DataSize, void* pData);
	void VideoProcessorSetStreamFrameFormat(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_FRAME_FORMAT FrameFormat);
	void VideoProcessorSetStreamColorSpace(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, const(D3D11_VIDEO_PROCESSOR_COLOR_SPACE)* pColorSpace);
	void VideoProcessorSetStreamOutputRate(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate, bool RepeatFrame, const(DXGI_RATIONAL)* pCustomRate);
	void VideoProcessorSetStreamSourceRect(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, const(RECT)* pRect);
	void VideoProcessorSetStreamDestRect(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, const(RECT)* pRect);
	void VideoProcessorSetStreamAlpha(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, float Alpha);
	void VideoProcessorSetStreamPalette(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, uint Count, const(uint)* pEntries);
	void VideoProcessorSetStreamPixelAspectRatio(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, const(DXGI_RATIONAL)* pSourceAspectRatio, const(DXGI_RATIONAL)* pDestinationAspectRatio);
	void VideoProcessorSetStreamLumaKey(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, float Lower, float Upper);
	void VideoProcessorSetStreamStereoFormat(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format, bool LeftViewFrame0, bool BaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode, int MonoOffset);
	void VideoProcessorSetStreamAutoProcessingMode(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable);
	void VideoProcessorSetStreamFilter(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, bool Enable, int Level);
	HRESULT VideoProcessorSetStreamExtension(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, const(GUID)* pExtensionGuid, uint DataSize, void* pData);
	void VideoProcessorGetStreamFrameFormat(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_FRAME_FORMAT* pFrameFormat);
	void VideoProcessorGetStreamColorSpace(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_COLOR_SPACE* pColorSpace);
	void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE* pOutputRate, bool* pRepeatFrame, DXGI_RATIONAL* pCustomRate);
	void VideoProcessorGetStreamSourceRect(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool* pEnabled, RECT* pRect);
	void VideoProcessorGetStreamDestRect(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool* pEnabled, RECT* pRect);
	void VideoProcessorGetStreamAlpha(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool* pEnabled, float* pAlpha);
	void VideoProcessorGetStreamPalette(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, uint Count, uint* pEntries);
	void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool* pEnabled, DXGI_RATIONAL* pSourceAspectRatio, DXGI_RATIONAL* pDestinationAspectRatio);
	void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool* pEnabled, float* pLower, float* pUpper);
	void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool* pEnable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT* pFormat, bool* pLeftViewFrame0, bool* pBaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE* pFlipMode, int* MonoOffset);
	void VideoProcessorGetStreamAutoProcessingMode(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool* pEnabled);
	void VideoProcessorGetStreamFilter(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, bool* pEnabled, int* pLevel);
	HRESULT VideoProcessorGetStreamExtension(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, const(GUID)* pExtensionGuid, uint DataSize, void* pData);
	HRESULT VideoProcessorBlt(ID3D11VideoProcessor pVideoProcessor, ID3D11VideoProcessorOutputView pView, uint OutputFrame, uint StreamCount, const(D3D11_VIDEO_PROCESSOR_STREAM)* pStreams);
	HRESULT NegotiateCryptoSessionKeyExchange(ID3D11CryptoSession pCryptoSession, uint DataSize, void* pData);
	void EncryptionBlt(ID3D11CryptoSession pCryptoSession, ID3D11Texture2D pSrcSurface, ID3D11Texture2D pDstSurface, uint IVSize, void* pIV);
	void DecryptionBlt(ID3D11CryptoSession pCryptoSession, ID3D11Texture2D pSrcSurface, ID3D11Texture2D pDstSurface, D3D11_ENCRYPTED_BLOCK_INFO* pEncryptedBlockInfo, uint ContentKeySize, const(void)* pContentKey, uint IVSize, void* pIV);
	void StartSessionKeyRefresh(ID3D11CryptoSession pCryptoSession, uint RandomNumberSize, void* pRandomNumber);
	void FinishSessionKeyRefresh(ID3D11CryptoSession pCryptoSession);
	HRESULT GetEncryptionBltKey(ID3D11CryptoSession pCryptoSession, uint KeySize, void* pReadbackKey);
	HRESULT NegotiateAuthenticatedChannelKeyExchange(ID3D11AuthenticatedChannel pChannel, uint DataSize, void* pData);
	HRESULT QueryAuthenticatedChannel(ID3D11AuthenticatedChannel pChannel, uint InputSize, const(void)* pInput, uint OutputSize, void* pOutput);
	HRESULT ConfigureAuthenticatedChannel(ID3D11AuthenticatedChannel pChannel, uint InputSize, const(void)* pInput, D3D11_AUTHENTICATED_CONFIGURE_OUTPUT* pOutput);
	void VideoProcessorSetStreamRotation(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, D3D11_VIDEO_PROCESSOR_ROTATION Rotation);
	void VideoProcessorGetStreamRotation(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool* pEnable, D3D11_VIDEO_PROCESSOR_ROTATION* pRotation);
}

@uuid("10ec4d5b-975a-4689-b9e4-d0aac30fe333")
interface ID3D11VideoDevice : IUnknown
{
extern(Windows):
	HRESULT CreateVideoDecoder(const(D3D11_VIDEO_DECODER_DESC)* pVideoDesc, const(D3D11_VIDEO_DECODER_CONFIG)* pConfig, ID3D11VideoDecoder* ppDecoder);
	HRESULT CreateVideoProcessor(ID3D11VideoProcessorEnumerator pEnum, uint RateConversionIndex, ID3D11VideoProcessor* ppVideoProcessor);
	HRESULT CreateAuthenticatedChannel(D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType, ID3D11AuthenticatedChannel* ppAuthenticatedChannel);
	HRESULT CreateCryptoSession(const(GUID)* pCryptoType, const(GUID)* pDecoderProfile, const(GUID)* pKeyExchangeType, ID3D11CryptoSession* ppCryptoSession);
	HRESULT CreateVideoDecoderOutputView(ID3D11Resource pResource, const(D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC)* pDesc, ID3D11VideoDecoderOutputView* ppVDOVView);
	HRESULT CreateVideoProcessorInputView(ID3D11Resource pResource, ID3D11VideoProcessorEnumerator pEnum, const(D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC)* pDesc, ID3D11VideoProcessorInputView* ppVPIView);
	HRESULT CreateVideoProcessorOutputView(ID3D11Resource pResource, ID3D11VideoProcessorEnumerator pEnum, const(D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC)* pDesc, ID3D11VideoProcessorOutputView* ppVPOView);
	HRESULT CreateVideoProcessorEnumerator(const(D3D11_VIDEO_PROCESSOR_CONTENT_DESC)* pDesc, ID3D11VideoProcessorEnumerator* ppEnum);
	uint GetVideoDecoderProfileCount();
	HRESULT GetVideoDecoderProfile(uint Index, GUID* pDecoderProfile);
	HRESULT CheckVideoDecoderFormat(const(GUID)* pDecoderProfile, DXGI_FORMAT Format, bool* pSupported);
	HRESULT GetVideoDecoderConfigCount(const(D3D11_VIDEO_DECODER_DESC)* pDesc, uint* pCount);
	HRESULT GetVideoDecoderConfig(const(D3D11_VIDEO_DECODER_DESC)* pDesc, uint Index, D3D11_VIDEO_DECODER_CONFIG* pConfig);
	HRESULT GetContentProtectionCaps(const(GUID)* pCryptoType, const(GUID)* pDecoderProfile, D3D11_VIDEO_CONTENT_PROTECTION_CAPS* pCaps);
	HRESULT CheckCryptoKeyExchange(const(GUID)* pCryptoType, const(GUID)* pDecoderProfile, uint Index, GUID* pKeyExchangeType);
	HRESULT SetPrivateData(REFGUID guid, uint DataSize, const(void)* pData);
	HRESULT SetPrivateDataInterface(REFGUID guid, const(IUnknown) pData);
}

@uuid("db6f6ddb-ac77-4e88-8253-819df9bbf140")
interface ID3D11Device : IUnknown
{
extern(Windows):
	HRESULT CreateBuffer(const(D3D11_BUFFER_DESC)* pDesc, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Buffer* ppBuffer);
	HRESULT CreateTexture1D(const(D3D11_TEXTURE1D_DESC)* pDesc, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Texture1D* ppTexture1D);
	HRESULT CreateTexture2D(const(D3D11_TEXTURE2D_DESC)* pDesc, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Texture2D* ppTexture2D);
	HRESULT CreateTexture3D(const(D3D11_TEXTURE3D_DESC)* pDesc, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Texture3D* ppTexture3D);
	HRESULT CreateShaderResourceView(ID3D11Resource pResource, const(D3D11_SHADER_RESOURCE_VIEW_DESC)* pDesc, ID3D11ShaderResourceView* ppSRView);
	HRESULT CreateUnorderedAccessView(ID3D11Resource pResource, const(D3D11_UNORDERED_ACCESS_VIEW_DESC)* pDesc, ID3D11UnorderedAccessView* ppUAView);
	HRESULT CreateRenderTargetView(ID3D11Resource pResource, const(D3D11_RENDER_TARGET_VIEW_DESC)* pDesc, ID3D11RenderTargetView* ppRTView);
	HRESULT CreateDepthStencilView(ID3D11Resource pResource, const(D3D11_DEPTH_STENCIL_VIEW_DESC)* pDesc, ID3D11DepthStencilView* ppDepthStencilView);
	HRESULT CreateInputLayout(const(D3D11_INPUT_ELEMENT_DESC)* pInputElementDescs, uint NumElements, const(void)* pShaderBytecodeWithInputSignature, size_t BytecodeLength, ID3D11InputLayout* ppInputLayout);
	HRESULT CreateVertexShader(const(void)* pShaderBytecode, size_t BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader* ppVertexShader);
	HRESULT CreateGeometryShader(const(void)* pShaderBytecode, size_t BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader* ppGeometryShader);
	HRESULT CreateGeometryShaderWithStreamOutput(const(void)* pShaderBytecode, size_t BytecodeLength, const(D3D11_SO_DECLARATION_ENTRY)* pSODeclaration, uint NumEntries, const(uint)* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader* ppGeometryShader);
	HRESULT CreatePixelShader(const(void)* pShaderBytecode, size_t BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader* ppPixelShader);
	HRESULT CreateHullShader(const(void)* pShaderBytecode, size_t BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11HullShader* ppHullShader);
	HRESULT CreateDomainShader(const(void)* pShaderBytecode, size_t BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader* ppDomainShader);
	HRESULT CreateComputeShader(const(void)* pShaderBytecode, size_t BytecodeLength, ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader* ppComputeShader);
	HRESULT CreateClassLinkage(ID3D11ClassLinkage* ppLinkage);
	HRESULT CreateBlendState(const(D3D11_BLEND_DESC)* pBlendStateDesc, ID3D11BlendState* ppBlendState);
	HRESULT CreateDepthStencilState(const(D3D11_DEPTH_STENCIL_DESC)* pDepthStencilDesc, ID3D11DepthStencilState* ppDepthStencilState);
	HRESULT CreateRasterizerState(const(D3D11_RASTERIZER_DESC)* pRasterizerDesc, ID3D11RasterizerState* ppRasterizerState);
	HRESULT CreateSamplerState(const(D3D11_SAMPLER_DESC)* pSamplerDesc, ID3D11SamplerState* ppSamplerState);
	HRESULT CreateQuery(const(D3D11_QUERY_DESC)* pQueryDesc, ID3D11Query* ppQuery);
	HRESULT CreatePredicate(const(D3D11_QUERY_DESC)* pPredicateDesc, ID3D11Predicate* ppPredicate);
	HRESULT CreateCounter(const(D3D11_COUNTER_DESC)* pCounterDesc, ID3D11Counter* ppCounter);
	HRESULT CreateDeferredContext(uint ContextFlags, ID3D11DeviceContext* ppDeferredContext);
	HRESULT OpenSharedResource(HANDLE hResource, REFIID ReturnedInterface, void** ppResource);
	HRESULT CheckFormatSupport(DXGI_FORMAT Format, uint* pFormatSupport);
	HRESULT CheckMultisampleQualityLevels(DXGI_FORMAT Format, uint SampleCount, uint* pNumQualityLevels);
	void CheckCounterInfo(D3D11_COUNTER_INFO* pCounterInfo);
	HRESULT CheckCounter(const(D3D11_COUNTER_DESC)* pDesc, D3D11_COUNTER_TYPE* pType, uint* pActiveCounters, LPSTR szName, uint* pNameLength, LPSTR szUnits, uint* pUnitsLength, LPSTR szDescription, uint* pDescriptionLength);
	HRESULT CheckFeatureSupport(D3D11_FEATURE Feature, void* pFeatureSupportData, uint FeatureSupportDataSize);
	HRESULT GetPrivateData(REFGUID guid, uint* pDataSize, void* pData);
	HRESULT SetPrivateData(REFGUID guid, uint DataSize, const(void)* pData);
	HRESULT SetPrivateDataInterface(REFGUID guid, const(IUnknown) pData);
	D3D_FEATURE_LEVEL GetFeatureLevel();
	uint GetCreationFlags();
	HRESULT GetDeviceRemovedReason();
	void GetImmediateContext(ID3D11DeviceContext* ppImmediateContext);
	HRESULT SetExceptionMode(uint RaiseFlags);
	uint GetExceptionMode();
}

@uuid("cc86fabe-da55-401d-85e7-e3c9de2877e9")
interface ID3D11BlendState1 : ID3D11BlendState
{
extern(Windows):
	void GetDesc1(D3D11_BLEND_DESC1* pDesc);
}

@uuid("1217d7a6-5039-418c-b042-9cbe256afd6e")
interface ID3D11RasterizerState1 : ID3D11RasterizerState
{
extern(Windows):
	void GetDesc1(D3D11_RASTERIZER_DESC1* pDesc);
}

@uuid("5c1e0d8a-7c23-48f9-8c59-a92958ceff11")
interface ID3DDeviceContextState : ID3D11DeviceChild
{
}

@uuid("bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1")
interface ID3D11DeviceContext1 : ID3D11DeviceContext
{
extern(Windows):
	void CopySubresourceRegion1(ID3D11Resource pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, ID3D11Resource pSrcResource, uint SrcSubresource, const(D3D11_BOX)* pSrcBox, uint CopyFlags);
	void UpdateSubresource1(ID3D11Resource pDstResource, uint DstSubresource, const(D3D11_BOX)* pDstBox, const(void)* pSrcData, uint SrcRowPitch, uint SrcDepthPitch, uint CopyFlags);
	void DiscardResource(ID3D11Resource pResource);
	void DiscardView(ID3D11View pResourceView);
	void VSSetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, const(uint)* pFirstConstant, const(uint)* pNumConstants);
	void HSSetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, const(uint)* pFirstConstant, const(uint)* pNumConstants);
	void DSSetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, const(uint)* pFirstConstant, const(uint)* pNumConstants);
	void GSSetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, const(uint)* pFirstConstant, const(uint)* pNumConstants);
	void PSSetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, const(uint)* pFirstConstant, const(uint)* pNumConstants);
	void CSSetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, const(uint)* pFirstConstant, const(uint)* pNumConstants);
	void VSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void HSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void DSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void GSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void PSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void CSGetConstantBuffers1(uint StartSlot, uint NumBuffers, ID3D11Buffer* ppConstantBuffers, uint* pFirstConstant, uint* pNumConstants);
	void SwapDeviceContextState(ID3DDeviceContextState pState, ID3DDeviceContextState* ppPreviousState);
	void ClearView(ID3D11View pView, const(FLOAT[4]) Color, const(RECT)* pRect, uint NumRects);
	void DiscardView1(ID3D11View pResourceView, const(RECT)* pRects, uint NumRects);
}

@uuid("a7f026da-a5f8-4487-a564-15e34357651e")
interface ID3D11VideoContext1 : ID3D11VideoContext
{
extern(Windows):
	HRESULT SubmitDecoderBuffers1(ID3D11VideoDecoder pDecoder, uint NumBuffers, const(D3D11_VIDEO_DECODER_BUFFER_DESC1)* pBufferDesc);
	HRESULT GetDataForNewHardwareKey(ID3D11CryptoSession pCryptoSession, uint PrivateInputSize, const(void)* pPrivatInputData, ulong* pPrivateOutputData);
	HRESULT CheckCryptoSessionStatus(ID3D11CryptoSession pCryptoSession, D3D11_CRYPTO_SESSION_STATUS* pStatus);
	HRESULT DecoderEnableDownsampling(ID3D11VideoDecoder pDecoder, DXGI_COLOR_SPACE_TYPE InputColorSpace, const(D3D11_VIDEO_SAMPLE_DESC)* pOutputDesc, uint ReferenceFrameCount);
	HRESULT DecoderUpdateDownsampling(ID3D11VideoDecoder pDecoder, const(D3D11_VIDEO_SAMPLE_DESC)* pOutputDesc);
	void VideoProcessorSetOutputColorSpace1(ID3D11VideoProcessor pVideoProcessor, DXGI_COLOR_SPACE_TYPE ColorSpace);
	void VideoProcessorSetOutputShaderUsage(ID3D11VideoProcessor pVideoProcessor, bool ShaderUsage);
	void VideoProcessorGetOutputColorSpace1(ID3D11VideoProcessor pVideoProcessor, DXGI_COLOR_SPACE_TYPE* pColorSpace);
	void VideoProcessorGetOutputShaderUsage(ID3D11VideoProcessor pVideoProcessor, bool* pShaderUsage);
	void VideoProcessorSetStreamColorSpace1(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, DXGI_COLOR_SPACE_TYPE ColorSpace);
	void VideoProcessorSetStreamMirror(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool Enable, bool FlipHorizontal, bool FlipVertical);
	void VideoProcessorGetStreamColorSpace1(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, DXGI_COLOR_SPACE_TYPE* pColorSpace);
	void VideoProcessorGetStreamMirror(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, bool* pEnable, bool* pFlipHorizontal, bool* pFlipVertical);
	HRESULT VideoProcessorGetBehaviorHints(ID3D11VideoProcessor pVideoProcessor, uint OutputWidth, uint OutputHeight, DXGI_FORMAT OutputFormat, uint StreamCount, const(D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT)* pStreams, uint* pBehaviorHints);
}

@uuid("29da1d51-1321-4454-804b-f5fc9f861f0f")
interface ID3D11VideoDevice1 : ID3D11VideoDevice
{
extern(Windows):
	HRESULT GetCryptoSessionPrivateDataSize(const(GUID)* pCryptoType, const(GUID)* pDecoderProfile, const(GUID)* pKeyExchangeType, uint* pPrivateInputSize, uint* pPrivateOutputSize);
	HRESULT GetVideoDecoderCaps(const(GUID)* pDecoderProfile, uint SampleWidth, uint SampleHeight, const(DXGI_RATIONAL)* pFrameRate, uint BitRate, const(GUID)* pCryptoType, uint* pDecoderCaps);
	HRESULT CheckVideoDecoderDownsampling(const(D3D11_VIDEO_DECODER_DESC)* pInputDesc, DXGI_COLOR_SPACE_TYPE InputColorSpace, const(D3D11_VIDEO_DECODER_CONFIG)* pInputConfig, const(DXGI_RATIONAL)* pFrameRate, const(D3D11_VIDEO_SAMPLE_DESC)* pOutputDesc, bool* pSupported, bool* pRealTimeHint);
	HRESULT RecommendVideoDecoderDownsampleParameters(const(D3D11_VIDEO_DECODER_DESC)* pInputDesc, DXGI_COLOR_SPACE_TYPE InputColorSpace, const(D3D11_VIDEO_DECODER_CONFIG)* pInputConfig, const(DXGI_RATIONAL)* pFrameRate, D3D11_VIDEO_SAMPLE_DESC* pRecommendedOutputDesc);
}

@uuid("465217f2-5568-43cf-b5b9-f61d54531ca1")
interface ID3D11VideoProcessorEnumerator1 : ID3D11VideoProcessorEnumerator
{
extern(Windows):
	HRESULT CheckVideoProcessorFormatConversion(DXGI_FORMAT InputFormat, DXGI_COLOR_SPACE_TYPE InputColorSpace, DXGI_FORMAT OutputFormat, DXGI_COLOR_SPACE_TYPE OutputColorSpace, bool* pSupported);
}

@uuid("a04bfb29-08ef-43d6-a49c-a9bdbdcbe686")
interface ID3D11Device1 : ID3D11Device
{
extern(Windows):
	void GetImmediateContext1(ID3D11DeviceContext1* ppImmediateContext);
	HRESULT CreateDeferredContext1(uint ContextFlags, ID3D11DeviceContext1* ppDeferredContext);
	HRESULT CreateBlendState1(const(D3D11_BLEND_DESC1)* pBlendStateDesc, ID3D11BlendState1* ppBlendState);
	HRESULT CreateRasterizerState1(const(D3D11_RASTERIZER_DESC1)* pRasterizerDesc, ID3D11RasterizerState1* ppRasterizerState);
	HRESULT CreateDeviceContextState(uint Flags, const(D3D_FEATURE_LEVEL)* pFeatureLevels, uint FeatureLevels, uint SDKVersion, REFIID EmulatedInterface, D3D_FEATURE_LEVEL* pChosenFeatureLevel, ID3DDeviceContextState* ppContextState);
	HRESULT OpenSharedResource1(HANDLE hResource, REFIID returnedInterface, void** ppResource);
	HRESULT OpenSharedResourceByName(LPCWSTR lpName, DWORD dwDesiredAccess, REFIID returnedInterface, void** ppResource);
}

@uuid("b2daad8b-03d4-4dbf-95eb-32ab4b63d0ab")
interface ID3DUserDefinedAnnotation : IUnknown
{
extern(Windows):
	INT BeginEvent(LPCWSTR Name);
	INT EndEvent();
	void SetMarker(LPCWSTR Name);
	bool GetStatus();
}

@uuid("420d5b32-b90c-4da4-bef0-359f6a24a83a")
interface ID3D11DeviceContext2 : ID3D11DeviceContext1
{
extern(Windows):
	HRESULT UpdateTileMappings(ID3D11Resource pTiledResource, uint NumTiledResourceRegions, const(D3D11_TILED_RESOURCE_COORDINATE)* pTiledResourceRegionStartCoordinates, const(D3D11_TILE_REGION_SIZE)* pTiledResourceRegionSizes, ID3D11Buffer pTilePool, uint NumRanges, const(uint)* pRangeFlags, const(uint)* pTilePoolStartOffsets, const(uint)* pRangeTileCounts, uint Flags);
	HRESULT CopyTileMappings(ID3D11Resource pDestTiledResource, const(D3D11_TILED_RESOURCE_COORDINATE)* pDestRegionStartCoordinate, ID3D11Resource pSourceTiledResource, const(D3D11_TILED_RESOURCE_COORDINATE)* pSourceRegionStartCoordinate, const(D3D11_TILE_REGION_SIZE)* pTileRegionSize, uint Flags);
	void CopyTiles(ID3D11Resource pTiledResource, const(D3D11_TILED_RESOURCE_COORDINATE)* pTileRegionStartCoordinate, const(D3D11_TILE_REGION_SIZE)* pTileRegionSize, ID3D11Buffer pBuffer, ulong BufferStartOffsetInBytes, uint Flags);
	void UpdateTiles(ID3D11Resource pDestTiledResource, const(D3D11_TILED_RESOURCE_COORDINATE)* pDestTileRegionStartCoordinate, const(D3D11_TILE_REGION_SIZE)* pDestTileRegionSize, const(void)* pSourceTileData, uint Flags);
	HRESULT ResizeTilePool(ID3D11Buffer pTilePool, ulong NewSizeInBytes);
	void TiledResourceBarrier(ID3D11DeviceChild pTiledResourceOrViewAccessBeforeBarrier, ID3D11DeviceChild pTiledResourceOrViewAccessAfterBarrier);
	bool IsAnnotationEnabled();
	void SetMarkerInt(LPCWSTR pLabel, INT Data);
	void BeginEventInt(LPCWSTR pLabel, INT Data);
	void EndEvent();
}

@uuid("9d06dffa-d1e5-4d07-83a8-1bb123f2f841")
interface ID3D11Device2 : ID3D11Device1
{
extern(Windows):
	void GetImmediateContext2(ID3D11DeviceContext2* ppImmediateContext);
	HRESULT CreateDeferredContext2(uint ContextFlags, ID3D11DeviceContext2* ppDeferredContext);
	void GetResourceTiling(ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, D3D11_PACKED_MIP_DESC* pPackedMipDesc, D3D11_TILE_SHAPE* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, D3D11_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);
	HRESULT CheckMultisampleQualityLevels1(DXGI_FORMAT Format, uint SampleCount, uint Flags, uint* pNumQualityLevels);
}

@uuid("51218251-1e33-4617-9ccb-4d3a4367e7bb")
interface ID3D11Texture2D1 : ID3D11Texture2D
{
extern(Windows):
	void GetDesc1(D3D11_TEXTURE2D_DESC1* pDesc);
}

@uuid("0c711683-2853-4846-9bb0-f3e60639e46a")
interface ID3D11Texture3D1 : ID3D11Texture3D
{
extern(Windows):
	void GetDesc1(D3D11_TEXTURE3D_DESC1* pDesc);
}

@uuid("6fbd02fb-209f-46c4-b059-2ed15586a6ac")
interface ID3D11RasterizerState2 : ID3D11RasterizerState1
{
extern(Windows):
	void GetDesc2(D3D11_RASTERIZER_DESC2* pDesc);
}

@uuid("91308b87-9040-411d-8c67-c39253ce3802")
interface ID3D11ShaderResourceView1 : ID3D11ShaderResourceView
{
extern(Windows):
	void GetDesc1(D3D11_SHADER_RESOURCE_VIEW_DESC1* pDesc1);
}

@uuid("ffbe2e23-f011-418a-ac56-5ceed7c5b94b")
interface ID3D11RenderTargetView1 : ID3D11RenderTargetView
{
extern(Windows):
	void GetDesc1(D3D11_RENDER_TARGET_VIEW_DESC1* pDesc1);
}

@uuid("7b3b6153-a886-4544-ab37-6537c8500403")
interface ID3D11UnorderedAccessView1 : ID3D11UnorderedAccessView
{
extern(Windows):
	void GetDesc1(D3D11_UNORDERED_ACCESS_VIEW_DESC1* pDesc1);
}

@uuid("631b4766-36dc-461d-8db6-c47e13e60916")
interface ID3D11Query1 : ID3D11Query
{
extern(Windows):
	void GetDesc1(D3D11_QUERY_DESC1* pDesc1);
}

@uuid("b4e3c01d-e79e-4637-91b2-510e9f4c9b8f")
interface ID3D11DeviceContext3 : ID3D11DeviceContext2
{
extern(Windows):
	void Flush1(D3D11_CONTEXT_TYPE ContextType, HANDLE hEvent);
	void SetHardwareProtectionState(bool HwProtectionEnable);
	void GetHardwareProtectionState(bool* pHwProtectionEnable);
}

@uuid("affde9d1-1df7-4bb7-8a34-0f46251dab80")
interface ID3D11Fence : ID3D11DeviceChild
{
extern(Windows):
	HRESULT CreateSharedHandle(const(SECURITY_ATTRIBUTES)* pAttributes, DWORD dwAccess, LPCWSTR lpName, HANDLE* pHandle);
	ulong GetCompletedValue();
	HRESULT SetEventOnCompletion(ulong Value, HANDLE hEvent);
}

@uuid("917600da-f58c-4c33-98d8-3e15b390fa24")
interface ID3D11DeviceContext4 : ID3D11DeviceContext3
{
extern(Windows):
	HRESULT Signal(ID3D11Fence pFence, ulong Value);
	HRESULT Wait(ID3D11Fence pFence, ulong Value);
}

@uuid("a05c8c37-d2c6-4732-b3a0-9ce0b0dc9ae6")
interface ID3D11Device3 : ID3D11Device2
{
extern(Windows):
	HRESULT CreateTexture2D1(const(D3D11_TEXTURE2D_DESC1)* pDesc1, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Texture2D1* ppTexture2D);
	HRESULT CreateTexture3D1(const(D3D11_TEXTURE3D_DESC1)* pDesc1, const(D3D11_SUBRESOURCE_DATA)* pInitialData, ID3D11Texture3D1* ppTexture3D);
	HRESULT CreateRasterizerState2(const(D3D11_RASTERIZER_DESC2)* pRasterizerDesc, ID3D11RasterizerState2* ppRasterizerState);
	HRESULT CreateShaderResourceView1(ID3D11Resource pResource, const(D3D11_SHADER_RESOURCE_VIEW_DESC1)* pDesc1, ID3D11ShaderResourceView1* ppSRView1);
	HRESULT CreateUnorderedAccessView1(ID3D11Resource pResource, const(D3D11_UNORDERED_ACCESS_VIEW_DESC1)* pDesc1, ID3D11UnorderedAccessView1* ppUAView1);
	HRESULT CreateRenderTargetView1(ID3D11Resource pResource, const(D3D11_RENDER_TARGET_VIEW_DESC1)* pDesc1, ID3D11RenderTargetView1* ppRTView1);
	HRESULT CreateQuery1(const(D3D11_QUERY_DESC1)* pQueryDesc1, ID3D11Query1* ppQuery1);
	void GetImmediateContext3(ID3D11DeviceContext3* ppImmediateContext);
	HRESULT CreateDeferredContext3(uint ContextFlags, ID3D11DeviceContext3* ppDeferredContext);
	void WriteToSubresource(ID3D11Resource pDstResource, uint DstSubresource, const(D3D11_BOX)* pDstBox, const(void)* pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
	void ReadFromSubresource(void* pDstData, uint DstRowPitch, uint DstDepthPitch, ID3D11Resource pSrcResource, uint SrcSubresource, const(D3D11_BOX)* pSrcBox);
}

@uuid("8992ab71-02e6-4b8d-ba48-b056dcda42c4")
interface ID3D11Device4 : ID3D11Device3
{
extern(Windows):
	HRESULT RegisterDeviceRemovedEvent(HANDLE hEvent, DWORD* pdwCookie);
	void UnregisterDeviceRemoved(DWORD dwCookie);
}

@uuid("8ffde202-a0e7-45df-9e01-e837801b5ea0")
interface ID3D11Device5 : ID3D11Device4
{
extern(Windows):
	HRESULT OpenSharedFence(HANDLE hFence, REFIID ReturnedInterface, void** ppFence);
	HRESULT CreateFence(ulong InitialValue, D3D11_FENCE_FLAG Flags, REFIID ReturnedInterface, void** ppFence);
}

@uuid("9b7e4e00-342c-4106-a19f-4f2704f689f0")
interface ID3D11Multithread : IUnknown
{
extern(Windows):
	void Enter();
	void Leave();
	bool SetMultithreadProtected(bool bMTProtect);
	bool GetMultithreadProtected();
}

@uuid("c4e7374c-6243-4d1b-ae87-52b4f740e261")
interface ID3D11VideoContext2 : ID3D11VideoContext1
{
extern(Windows):
	void VideoProcessorSetOutputHDRMetaData(ID3D11VideoProcessor pVideoProcessor, DXGI_HDR_METADATA_TYPE Type, uint Size, const(void)* pHDRMetaData);
	void VideoProcessorGetOutputHDRMetaData(ID3D11VideoProcessor pVideoProcessor, DXGI_HDR_METADATA_TYPE* pType, uint Size, void* pMetaData);
	void VideoProcessorSetStreamHDRMetaData(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, DXGI_HDR_METADATA_TYPE Type, uint Size, const(void)* pHDRMetaData);
	void VideoProcessorGetStreamHDRMetaData(ID3D11VideoProcessor pVideoProcessor, uint StreamIndex, DXGI_HDR_METADATA_TYPE* pType, uint Size, void* pMetaData);
}

@uuid("aec22fb8-76f3-4639-9be0-28eb43a67a2e")
interface IDXGIObject : IUnknown
{
extern(Windows):
	HRESULT SetPrivateData(REFGUID Name, uint DataSize, const(void)* pData);
	HRESULT SetPrivateDataInterface(REFGUID Name, const(IUnknown) pUnknown);
	HRESULT GetPrivateData(REFGUID Name, uint* out_pDataSize, void* out_pData);
	HRESULT GetParent(REFIID riid, void** return_ppParent);
}

@uuid("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")
interface IDXGIDeviceSubObject : IDXGIObject
{
extern(Windows):
	HRESULT GetDevice(REFIID riid, void** return_ppDevice);
}

@uuid("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")
interface IDXGIResource : IDXGIDeviceSubObject
{
extern(Windows):
	HRESULT GetSharedHandle(HANDLE* out_pSharedHandle);
	HRESULT GetUsage(uint* out_pUsage);
	HRESULT SetEvictionPriority(uint EvictionPriority);
	HRESULT GetEvictionPriority(uint* return_pEvictionPriority);
}

@uuid("9d8e1289-d7b3-465f-8126-250e349af85d")
interface IDXGIKeyedMutex : IDXGIDeviceSubObject
{
extern(Windows):
	HRESULT AcquireSync(ulong Key, DWORD dwMilliseconds);
	HRESULT ReleaseSync(ulong Key);
}

@uuid("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")
interface IDXGISurface : IDXGIDeviceSubObject
{
extern(Windows):
	HRESULT GetDesc(DXGI_SURFACE_DESC* out_pDesc);
	HRESULT Map(DXGI_MAPPED_RECT* out_pLockedRect, uint MapFlags);
	HRESULT Unmap();
}

@uuid("4ae63092-6327-4c1b-80ae-bfe12ea32b86")
interface IDXGISurface1 : IDXGISurface
{
extern(Windows):
	HRESULT GetDC(bool Discard, HDC* out_phdc);
	HRESULT ReleaseDC(RECT* pDirtyRect);
}

@uuid("2411e7e1-12ac-4ccf-bd14-9798e8534dc0")
interface IDXGIAdapter : IDXGIObject
{
extern(Windows):
	HRESULT EnumOutputs(uint Output, IDXGIOutput* out_ppOutput);
	HRESULT GetDesc(DXGI_ADAPTER_DESC* out_pDesc);
	HRESULT CheckInterfaceSupport(REFGUID InterfaceName, LARGE_INTEGER* out_pUMDVersion);
}

@uuid("ae02eedb-c735-4690-8d52-5a8dc20213aa")
interface IDXGIOutput : IDXGIObject
{
extern(Windows):
	HRESULT GetDesc(DXGI_OUTPUT_DESC* out_pDesc);
	HRESULT GetDisplayModeList(DXGI_FORMAT EnumFormat, uint Flags, uint* out_pNumModes, DXGI_MODE_DESC* out_pDesc);
	HRESULT FindClosestMatchingMode(const(DXGI_MODE_DESC)* pModeToMatch, DXGI_MODE_DESC* out_pClosestMatch, IUnknown pConcernedDevice);
	HRESULT WaitForVBlank();
	HRESULT TakeOwnership(IUnknown pDevice, bool Exclusive);
	void ReleaseOwnership();
	HRESULT GetGammaControlCapabilities(DXGI_GAMMA_CONTROL_CAPABILITIES* out_pGammaCaps);
	HRESULT SetGammaControl(const(DXGI_GAMMA_CONTROL)* pArray);
	HRESULT GetGammaControl(DXGI_GAMMA_CONTROL* out_pArray);
	HRESULT SetDisplaySurface(IDXGISurface pScanoutSurface);
	HRESULT GetDisplaySurfaceData(IDXGISurface pDestination);
	HRESULT GetFrameStatistics(DXGI_FRAME_STATISTICS* out_pStats);
}

@uuid("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a")
interface IDXGISwapChain : IDXGIDeviceSubObject
{
extern(Windows):
	HRESULT Present(uint SyncInterval, uint Flags);
	HRESULT GetBuffer(uint Buffer, REFIID riid, void** out_ppSurface);
	HRESULT SetFullscreenState(bool Fullscreen, IDXGIOutput pTarget);
	HRESULT GetFullscreenState(bool* out_pFullscreen, IDXGIOutput* out_ppTarget);
	HRESULT GetDesc(DXGI_SWAP_CHAIN_DESC* out_pDesc);
	HRESULT ResizeBuffers(uint BufferCount, uint Width, uint Height, DXGI_FORMAT NewFormat, uint SwapChainFlags);
	HRESULT ResizeTarget(const(DXGI_MODE_DESC)* pNewTargetParameters);
	HRESULT GetContainingOutput(IDXGIOutput* out_ppOutput);
	HRESULT GetFrameStatistics(DXGI_FRAME_STATISTICS* out_pStats);
	HRESULT GetLastPresentCount(uint* out_pLastPresentCount);
}

@uuid("7b7166ec-21c7-44ae-b21a-c9ae321ae369")
interface IDXGIFactory : IDXGIObject
{
extern(Windows):
	HRESULT EnumAdapters(uint Adapter, IDXGIAdapter* out_ppAdapter);
	HRESULT MakeWindowAssociation(HWND WindowHandle, uint Flags);
	HRESULT GetWindowAssociation(HWND* out_pWindowHandle);
	HRESULT CreateSwapChain(IUnknown pDevice, DXGI_SWAP_CHAIN_DESC* pDesc, IDXGISwapChain* out_ppSwapChain);
	HRESULT CreateSoftwareAdapter(HMODULE Module, IDXGIAdapter* out_ppAdapter);
}

@uuid("54ec77fa-1377-44e6-8c32-88fd5f44c84c")
interface IDXGIDevice : IDXGIObject
{
extern(Windows):
	HRESULT GetAdapter(IDXGIAdapter* out_pAdapter);
	HRESULT CreateSurface(const(DXGI_SURFACE_DESC)* pDesc, uint NumSurfaces, uint Usage, const(DXGI_SHARED_RESOURCE)* pSharedResource, IDXGISurface* out_ppSurface);
	HRESULT QueryResourceResidency(IUnknown* ppResources, DXGI_RESIDENCY* out_pResidencyStatus, uint NumResources);
	HRESULT SetGPUThreadPriority(INT Priority);
	HRESULT GetGPUThreadPriority(INT* return_pPriority);
}

@uuid("770aae78-f26f-4dba-a829-253c83d1b387")
interface IDXGIFactory1 : IDXGIFactory
{
extern(Windows):
	HRESULT EnumAdapters1(uint Adapter, IDXGIAdapter1* out_ppAdapter);
	bool IsCurrent();
}

@uuid("29038f61-3839-4626-91fd-086879011a05")
interface IDXGIAdapter1 : IDXGIAdapter
{
extern(Windows):
	HRESULT GetDesc1(DXGI_ADAPTER_DESC1* out_pDesc);
}

@uuid("77db970f-6276-48ba-ba28-070143b4392c")
interface IDXGIDevice1 : IDXGIDevice
{
extern(Windows):
	HRESULT SetMaximumFrameLatency(uint MaxLatency);
	HRESULT GetMaximumFrameLatency(uint* out_pMaxLatency);
}

enum D3D_DRIVER_TYPE
{
	TYPE_UNKNOWN,
	TYPE_HARDWARE,
	TYPE_REFERENCE,
	TYPE_NULL,
	TYPE_SOFTWARE,
	TYPE_WARP
}

enum D3D_FEATURE_LEVEL
{
	_9_1 = 0x9100,
	_9_2 = 0x9200,
	_9_3 = 0x9300,
	_10_0 = _0xa000,
	_10_1 = _0xa100,
	_11_0 = _0xb000,
	_11_1 = _0xb100,
	_12_0 = _0xc000,
	_12_1 = _0xc100
}

enum D3D_PRIMITIVE_TOPOLOGY
{
	UNDEFINED = 0,
	POINTLIST = 1,
	LINELIST = 2,
	LINESTRIP = 3,
	TRIANGLELIST = 4,
	TRIANGLESTRIP = 5,
	LINELIST_ADJ = 10,
	LINESTRIP_ADJ = 11,
	TRIANGLELIST_ADJ = 12,
	TRIANGLESTRIP_ADJ = 13,
	_1_CONTROL_POINT_PATCHLIST = 33,
	_2_CONTROL_POINT_PATCHLIST = 34,
	_3_CONTROL_POINT_PATCHLIST = 35,
	_4_CONTROL_POINT_PATCHLIST = 36,
	_5_CONTROL_POINT_PATCHLIST = 37,
	_6_CONTROL_POINT_PATCHLIST = 38,
	_7_CONTROL_POINT_PATCHLIST = 39,
	_8_CONTROL_POINT_PATCHLIST = 40,
	_9_CONTROL_POINT_PATCHLIST = 41,
	_10_CONTROL_POINT_PATCHLIST = 42,
	_11_CONTROL_POINT_PATCHLIST = 43,
	_12_CONTROL_POINT_PATCHLIST = 44,
	_13_CONTROL_POINT_PATCHLIST = 45,
	_14_CONTROL_POINT_PATCHLIST = 46,
	_15_CONTROL_POINT_PATCHLIST = 47,
	_16_CONTROL_POINT_PATCHLIST = 48,
	_17_CONTROL_POINT_PATCHLIST = 49,
	_18_CONTROL_POINT_PATCHLIST = 50,
	_19_CONTROL_POINT_PATCHLIST = 51,
	_20_CONTROL_POINT_PATCHLIST = 52,
	_21_CONTROL_POINT_PATCHLIST = 53,
	_22_CONTROL_POINT_PATCHLIST = 54,
	_23_CONTROL_POINT_PATCHLIST = 55,
	_24_CONTROL_POINT_PATCHLIST = 56,
	_25_CONTROL_POINT_PATCHLIST = 57,
	_26_CONTROL_POINT_PATCHLIST = 58,
	_27_CONTROL_POINT_PATCHLIST = 59,
	_28_CONTROL_POINT_PATCHLIST = 60,
	_29_CONTROL_POINT_PATCHLIST = 61,
	_30_CONTROL_POINT_PATCHLIST = 62,
	_31_CONTROL_POINT_PATCHLIST = 63,
	_32_CONTROL_POINT_PATCHLIST = 64,
	PRIMITIVE_TOPOLOGY_UNDEFINED = UNDEFINED,
	PRIMITIVE_TOPOLOGY_POINTLIST = POINTLIST,
	PRIMITIVE_TOPOLOGY_LINELIST = LINELIST,
	PRIMITIVE_TOPOLOGY_LINESTRIP = LINESTRIP,
	PRIMITIVE_TOPOLOGY_TRIANGLELIST = TRIANGLELIST,
	PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = TRIANGLESTRIP,
	PRIMITIVE_TOPOLOGY_LINELIST_ADJ = LINELIST_ADJ,
	PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = LINESTRIP_ADJ,
	PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = TRIANGLELIST_ADJ,
	PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = TRIANGLESTRIP_ADJ,
	PRIMITIVE_TOPOLOGY_UNDEFINED = UNDEFINED,
	PRIMITIVE_TOPOLOGY_POINTLIST = POINTLIST,
	PRIMITIVE_TOPOLOGY_LINELIST = LINELIST,
	PRIMITIVE_TOPOLOGY_LINESTRIP = LINESTRIP,
	PRIMITIVE_TOPOLOGY_TRIANGLELIST = TRIANGLELIST,
	PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = TRIANGLESTRIP,
	PRIMITIVE_TOPOLOGY_LINELIST_ADJ = LINELIST_ADJ,
	PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = LINESTRIP_ADJ,
	PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = TRIANGLELIST_ADJ,
	PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = TRIANGLESTRIP_ADJ,
	PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = _1_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = _2_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = _3_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = _4_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = _5_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = _6_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = _7_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = _8_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = _9_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = _10_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = _11_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = _12_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = _13_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = _14_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = _15_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = _16_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = _17_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = _18_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = _19_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = _20_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = _21_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = _22_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = _23_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = _24_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = _25_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = _26_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = _27_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = _28_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = _29_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = _30_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = _31_CONTROL_POINT_PATCHLIST,
	PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = _32_CONTROL_POINT_PATCHLIST
}

enum D3D_PRIMITIVE
{
	UNDEFINED = 0,
	POINT = 1,
	LINE = 2,
	TRIANGLE = 3,
	LINE_ADJ = 6,
	TRIANGLE_ADJ = 7,
	_1_CONTROL_POINT_PATCH = 8,
	_2_CONTROL_POINT_PATCH = 9,
	_3_CONTROL_POINT_PATCH = 10,
	_4_CONTROL_POINT_PATCH = 11,
	_5_CONTROL_POINT_PATCH = 12,
	_6_CONTROL_POINT_PATCH = 13,
	_7_CONTROL_POINT_PATCH = 14,
	_8_CONTROL_POINT_PATCH = 15,
	_9_CONTROL_POINT_PATCH = 16,
	_10_CONTROL_POINT_PATCH = 17,
	_11_CONTROL_POINT_PATCH = 18,
	_12_CONTROL_POINT_PATCH = 19,
	_13_CONTROL_POINT_PATCH = 20,
	_14_CONTROL_POINT_PATCH = 21,
	_15_CONTROL_POINT_PATCH = 22,
	_16_CONTROL_POINT_PATCH = 23,
	_17_CONTROL_POINT_PATCH = 24,
	_18_CONTROL_POINT_PATCH = 25,
	_19_CONTROL_POINT_PATCH = 26,
	_20_CONTROL_POINT_PATCH = 27,
	_21_CONTROL_POINT_PATCH = 28,
	_22_CONTROL_POINT_PATCH = 29,
	_23_CONTROL_POINT_PATCH = 30,
	_24_CONTROL_POINT_PATCH = 31,
	_25_CONTROL_POINT_PATCH = 32,
	_26_CONTROL_POINT_PATCH = 33,
	_27_CONTROL_POINT_PATCH = 34,
	_28_CONTROL_POINT_PATCH = 35,
	_29_CONTROL_POINT_PATCH = 36,
	_30_CONTROL_POINT_PATCH = 37,
	_31_CONTROL_POINT_PATCH = 38,
	_32_CONTROL_POINT_PATCH = 39,
	PRIMITIVE_UNDEFINED = UNDEFINED,
	PRIMITIVE_POINT = POINT,
	PRIMITIVE_LINE = LINE,
	PRIMITIVE_TRIANGLE = TRIANGLE,
	PRIMITIVE_LINE_ADJ = LINE_ADJ,
	PRIMITIVE_TRIANGLE_ADJ = TRIANGLE_ADJ,
	PRIMITIVE_UNDEFINED = UNDEFINED,
	PRIMITIVE_POINT = POINT,
	PRIMITIVE_LINE = LINE,
	PRIMITIVE_TRIANGLE = TRIANGLE,
	PRIMITIVE_LINE_ADJ = LINE_ADJ,
	PRIMITIVE_TRIANGLE_ADJ = TRIANGLE_ADJ,
	PRIMITIVE_1_CONTROL_POINT_PATCH = _1_CONTROL_POINT_PATCH,
	PRIMITIVE_2_CONTROL_POINT_PATCH = _2_CONTROL_POINT_PATCH,
	PRIMITIVE_3_CONTROL_POINT_PATCH = _3_CONTROL_POINT_PATCH,
	PRIMITIVE_4_CONTROL_POINT_PATCH = _4_CONTROL_POINT_PATCH,
	PRIMITIVE_5_CONTROL_POINT_PATCH = _5_CONTROL_POINT_PATCH,
	PRIMITIVE_6_CONTROL_POINT_PATCH = _6_CONTROL_POINT_PATCH,
	PRIMITIVE_7_CONTROL_POINT_PATCH = _7_CONTROL_POINT_PATCH,
	PRIMITIVE_8_CONTROL_POINT_PATCH = _8_CONTROL_POINT_PATCH,
	PRIMITIVE_9_CONTROL_POINT_PATCH = _9_CONTROL_POINT_PATCH,
	PRIMITIVE_10_CONTROL_POINT_PATCH = _10_CONTROL_POINT_PATCH,
	PRIMITIVE_11_CONTROL_POINT_PATCH = _11_CONTROL_POINT_PATCH,
	PRIMITIVE_12_CONTROL_POINT_PATCH = _12_CONTROL_POINT_PATCH,
	PRIMITIVE_13_CONTROL_POINT_PATCH = _13_CONTROL_POINT_PATCH,
	PRIMITIVE_14_CONTROL_POINT_PATCH = _14_CONTROL_POINT_PATCH,
	PRIMITIVE_15_CONTROL_POINT_PATCH = _15_CONTROL_POINT_PATCH,
	PRIMITIVE_16_CONTROL_POINT_PATCH = _16_CONTROL_POINT_PATCH,
	PRIMITIVE_17_CONTROL_POINT_PATCH = _17_CONTROL_POINT_PATCH,
	PRIMITIVE_18_CONTROL_POINT_PATCH = _18_CONTROL_POINT_PATCH,
	PRIMITIVE_19_CONTROL_POINT_PATCH = _19_CONTROL_POINT_PATCH,
	PRIMITIVE_20_CONTROL_POINT_PATCH = _20_CONTROL_POINT_PATCH,
	PRIMITIVE_21_CONTROL_POINT_PATCH = _21_CONTROL_POINT_PATCH,
	PRIMITIVE_22_CONTROL_POINT_PATCH = _22_CONTROL_POINT_PATCH,
	PRIMITIVE_23_CONTROL_POINT_PATCH = _23_CONTROL_POINT_PATCH,
	PRIMITIVE_24_CONTROL_POINT_PATCH = _24_CONTROL_POINT_PATCH,
	PRIMITIVE_25_CONTROL_POINT_PATCH = _25_CONTROL_POINT_PATCH,
	PRIMITIVE_26_CONTROL_POINT_PATCH = _26_CONTROL_POINT_PATCH,
	PRIMITIVE_27_CONTROL_POINT_PATCH = _27_CONTROL_POINT_PATCH,
	PRIMITIVE_28_CONTROL_POINT_PATCH = _28_CONTROL_POINT_PATCH,
	PRIMITIVE_29_CONTROL_POINT_PATCH = _29_CONTROL_POINT_PATCH,
	PRIMITIVE_30_CONTROL_POINT_PATCH = _30_CONTROL_POINT_PATCH,
	PRIMITIVE_31_CONTROL_POINT_PATCH = _31_CONTROL_POINT_PATCH,
	PRIMITIVE_32_CONTROL_POINT_PATCH = _32_CONTROL_POINT_PATCH
}

enum D3D_SRV_DIMENSION
{
	UNKNOWN = 0,
	BUFFER = 1,
	TEXTURE1D = 2,
	TEXTURE1DARRAY = 3,
	TEXTURE2D = 4,
	TEXTURE2DARRAY = 5,
	TEXTURE2DMS = 6,
	TEXTURE2DMSARRAY = 7,
	TEXTURE3D = 8,
	TEXTURECUBE = 9,
	TEXTURECUBEARRAY = 10,
	BUFFEREX = 11,
	SRV_DIMENSION_UNKNOWN = UNKNOWN,
	SRV_DIMENSION_BUFFER = BUFFER,
	SRV_DIMENSION_TEXTURE1D = TEXTURE1D,
	SRV_DIMENSION_TEXTURE1DARRAY = TEXTURE1DARRAY,
	SRV_DIMENSION_TEXTURE2D = TEXTURE2D,
	SRV_DIMENSION_TEXTURE2DARRAY = TEXTURE2DARRAY,
	SRV_DIMENSION_TEXTURE2DMS = TEXTURE2DMS,
	SRV_DIMENSION_TEXTURE2DMSARRAY = TEXTURE2DMSARRAY,
	SRV_DIMENSION_TEXTURE3D = TEXTURE3D,
	SRV_DIMENSION_TEXTURECUBE = TEXTURECUBE,
	_1_SRV_DIMENSION_UNKNOWN = UNKNOWN,
	_1_SRV_DIMENSION_BUFFER = BUFFER,
	_1_SRV_DIMENSION_TEXTURE1D = TEXTURE1D,
	_1_SRV_DIMENSION_TEXTURE1DARRAY = TEXTURE1DARRAY,
	_1_SRV_DIMENSION_TEXTURE2D = TEXTURE2D,
	_1_SRV_DIMENSION_TEXTURE2DARRAY = TEXTURE2DARRAY,
	_1_SRV_DIMENSION_TEXTURE2DMS = TEXTURE2DMS,
	_1_SRV_DIMENSION_TEXTURE2DMSARRAY = TEXTURE2DMSARRAY,
	_1_SRV_DIMENSION_TEXTURE3D = TEXTURE3D,
	_1_SRV_DIMENSION_TEXTURECUBE = TEXTURECUBE,
	_1_SRV_DIMENSION_TEXTURECUBEARRAY = TEXTURECUBEARRAY,
	SRV_DIMENSION_UNKNOWN = UNKNOWN,
	SRV_DIMENSION_BUFFER = BUFFER,
	SRV_DIMENSION_TEXTURE1D = TEXTURE1D,
	SRV_DIMENSION_TEXTURE1DARRAY = TEXTURE1DARRAY,
	SRV_DIMENSION_TEXTURE2D = TEXTURE2D,
	SRV_DIMENSION_TEXTURE2DARRAY = TEXTURE2DARRAY,
	SRV_DIMENSION_TEXTURE2DMS = TEXTURE2DMS,
	SRV_DIMENSION_TEXTURE2DMSARRAY = TEXTURE2DMSARRAY,
	SRV_DIMENSION_TEXTURE3D = TEXTURE3D,
	SRV_DIMENSION_TEXTURECUBE = TEXTURECUBE,
	SRV_DIMENSION_TEXTURECUBEARRAY = TEXTURECUBEARRAY,
	SRV_DIMENSION_BUFFEREX = BUFFEREX
}

enum D3D_INCLUDE_TYPE
{
	LOCAL,
	SYSTEM,
	INCLUDE_LOCAL = LOCAL,
	INCLUDE_SYSTEM = SYSTEM,
	FORCE_DWORD = _0x7fffffff
}

enum D3D_SHADER_VARIABLE_CLASS
{
	SVC_SCALAR,
	SVC_VECTOR,
	SVC_MATRIX_ROWS,
	SVC_MATRIX_COLUMNS,
	SVC_OBJECT,
	SVC_STRUCT,
	SVC_INTERFACE_CLASS,
	SVC_INTERFACE_POINTER,
	SVC_SCALAR = SVC_SCALAR,
	SVC_VECTOR = SVC_VECTOR,
	SVC_MATRIX_ROWS = SVC_MATRIX_ROWS,
	SVC_MATRIX_COLUMNS = SVC_MATRIX_COLUMNS,
	SVC_OBJECT = SVC_OBJECT,
	SVC_STRUCT = SVC_STRUCT,
	SVC_INTERFACE_CLASS = SVC_INTERFACE_CLASS,
	SVC_INTERFACE_POINTER = SVC_INTERFACE_POINTER,
	SVC_FORCE_DWORD = _0x7fffffff
}

enum D3D_SHADER_VARIABLE_FLAGS
{
	SVF_USERPACKED = 1,
	SVF_USED = 2,
	SVF_INTERFACE_POINTER = 4,
	SVF_INTERFACE_PARAMETER = 8,
	SVF_USERPACKED = SVF_USERPACKED,
	SVF_USED = SVF_USED,
	SVF_INTERFACE_POINTER = SVF_INTERFACE_POINTER,
	SVF_INTERFACE_PARAMETER = SVF_INTERFACE_PARAMETER,
	SVF_FORCE_DWORD = _0x7fffffff
}

enum D3D_SHADER_VARIABLE_TYPE
{
	SVT_VOID = 0,
	SVT_BOOL = 1,
	SVT_INT = 2,
	SVT_FLOAT = 3,
	SVT_STRING = 4,
	SVT_TEXTURE = 5,
	SVT_TEXTURE1D = 6,
	SVT_TEXTURE2D = 7,
	SVT_TEXTURE3D = 8,
	SVT_TEXTURECUBE = 9,
	SVT_SAMPLER = 10,
	SVT_SAMPLER1D = 11,
	SVT_SAMPLER2D = 12,
	SVT_SAMPLER3D = 13,
	SVT_SAMPLERCUBE = 14,
	SVT_PIXELSHADER = 15,
	SVT_VERTEXSHADER = 16,
	SVT_PIXELFRAGMENT = 17,
	SVT_VERTEXFRAGMENT = 18,
	SVT_UINT = 19,
	SVT_UINT8 = 20,
	SVT_GEOMETRYSHADER = 21,
	SVT_RASTERIZER = 22,
	SVT_DEPTHSTENCIL = 23,
	SVT_BLEND = 24,
	SVT_BUFFER = 25,
	SVT_CBUFFER = 26,
	SVT_TBUFFER = 27,
	SVT_TEXTURE1DARRAY = 28,
	SVT_TEXTURE2DARRAY = 29,
	SVT_RENDERTARGETVIEW = 30,
	SVT_DEPTHSTENCILVIEW = 31,
	SVT_TEXTURE2DMS = 32,
	SVT_TEXTURE2DMSARRAY = 33,
	SVT_TEXTURECUBEARRAY = 34,
	SVT_HULLSHADER = 35,
	SVT_DOMAINSHADER = 36,
	SVT_INTERFACE_POINTER = 37,
	SVT_COMPUTESHADER = 38,
	SVT_DOUBLE = 39,
	SVT_RWTEXTURE1D = 40,
	SVT_RWTEXTURE1DARRAY = 41,
	SVT_RWTEXTURE2D = 42,
	SVT_RWTEXTURE2DARRAY = 43,
	SVT_RWTEXTURE3D = 44,
	SVT_RWBUFFER = 45,
	SVT_BYTEADDRESS_BUFFER = 46,
	SVT_RWBYTEADDRESS_BUFFER = 47,
	SVT_STRUCTURED_BUFFER = 48,
	SVT_RWSTRUCTURED_BUFFER = 49,
	SVT_APPEND_STRUCTURED_BUFFER = 50,
	SVT_CONSUME_STRUCTURED_BUFFER = 51,
	SVT_MIN8FLOAT = 52,
	SVT_MIN10FLOAT = 53,
	SVT_MIN16FLOAT = 54,
	SVT_MIN12INT = 55,
	SVT_MIN16INT = 56,
	SVT_MIN16UINT = 57,
	SVT_VOID = SVT_VOID,
	SVT_BOOL = SVT_BOOL,
	SVT_INT = SVT_INT,
	SVT_FLOAT = SVT_FLOAT,
	SVT_STRING = SVT_STRING,
	SVT_TEXTURE = SVT_TEXTURE,
	SVT_TEXTURE1D = SVT_TEXTURE1D,
	SVT_TEXTURE2D = SVT_TEXTURE2D,
	SVT_TEXTURE3D = SVT_TEXTURE3D,
	SVT_TEXTURECUBE = SVT_TEXTURECUBE,
	SVT_SAMPLER = SVT_SAMPLER,
	SVT_SAMPLER1D = SVT_SAMPLER1D,
	SVT_SAMPLER2D = SVT_SAMPLER2D,
	SVT_SAMPLER3D = SVT_SAMPLER3D,
	SVT_SAMPLERCUBE = SVT_SAMPLERCUBE,
	SVT_PIXELSHADER = SVT_PIXELSHADER,
	SVT_VERTEXSHADER = SVT_VERTEXSHADER,
	SVT_PIXELFRAGMENT = SVT_PIXELFRAGMENT,
	SVT_VERTEXFRAGMENT = SVT_VERTEXFRAGMENT,
	SVT_UINT = SVT_UINT,
	SVT_UINT8 = SVT_UINT8,
	SVT_GEOMETRYSHADER = SVT_GEOMETRYSHADER,
	SVT_RASTERIZER = SVT_RASTERIZER,
	SVT_DEPTHSTENCIL = SVT_DEPTHSTENCIL,
	SVT_BLEND = SVT_BLEND,
	SVT_BUFFER = SVT_BUFFER,
	SVT_CBUFFER = SVT_CBUFFER,
	SVT_TBUFFER = SVT_TBUFFER,
	SVT_TEXTURE1DARRAY = SVT_TEXTURE1DARRAY,
	SVT_TEXTURE2DARRAY = SVT_TEXTURE2DARRAY,
	SVT_RENDERTARGETVIEW = SVT_RENDERTARGETVIEW,
	SVT_DEPTHSTENCILVIEW = SVT_DEPTHSTENCILVIEW,
	SVT_TEXTURE2DMS = SVT_TEXTURE2DMS,
	SVT_TEXTURE2DMSARRAY = SVT_TEXTURE2DMSARRAY,
	SVT_TEXTURECUBEARRAY = SVT_TEXTURECUBEARRAY,
	SVT_HULLSHADER = SVT_HULLSHADER,
	SVT_DOMAINSHADER = SVT_DOMAINSHADER,
	SVT_INTERFACE_POINTER = SVT_INTERFACE_POINTER,
	SVT_COMPUTESHADER = SVT_COMPUTESHADER,
	SVT_DOUBLE = SVT_DOUBLE,
	SVT_RWTEXTURE1D = SVT_RWTEXTURE1D,
	SVT_RWTEXTURE1DARRAY = SVT_RWTEXTURE1DARRAY,
	SVT_RWTEXTURE2D = SVT_RWTEXTURE2D,
	SVT_RWTEXTURE2DARRAY = SVT_RWTEXTURE2DARRAY,
	SVT_RWTEXTURE3D = SVT_RWTEXTURE3D,
	SVT_RWBUFFER = SVT_RWBUFFER,
	SVT_BYTEADDRESS_BUFFER = SVT_BYTEADDRESS_BUFFER,
	SVT_RWBYTEADDRESS_BUFFER = SVT_RWBYTEADDRESS_BUFFER,
	SVT_STRUCTURED_BUFFER = SVT_STRUCTURED_BUFFER,
	SVT_RWSTRUCTURED_BUFFER = SVT_RWSTRUCTURED_BUFFER,
	SVT_APPEND_STRUCTURED_BUFFER = SVT_APPEND_STRUCTURED_BUFFER,
	SVT_CONSUME_STRUCTURED_BUFFER = SVT_CONSUME_STRUCTURED_BUFFER,
	SVT_FORCE_DWORD = _0x7fffffff
}

enum D3D_SHADER_INPUT_FLAGS
{
	SIF_USERPACKED = 0x01,
	SIF_COMPARISON_SAMPLER = 0x02,
	SIF_TEXTURE_COMPONENT_0 = 0x04,
	SIF_TEXTURE_COMPONENT_1 = 0x08,
	SIF_TEXTURE_COMPONENTS = _0x0c,
	SIF_UNUSED = 0x10,
	SIF_USERPACKED = SIF_USERPACKED,
	SIF_COMPARISON_SAMPLER = SIF_COMPARISON_SAMPLER,
	SIF_TEXTURE_COMPONENT_0 = SIF_TEXTURE_COMPONENT_0,
	SIF_TEXTURE_COMPONENT_1 = SIF_TEXTURE_COMPONENT_1,
	SIF_TEXTURE_COMPONENTS = SIF_TEXTURE_COMPONENTS,
	SIF_FORCE_DWORD = _0x7fffffff
}

enum D3D_SHADER_INPUT_TYPE
{
	SIT_CBUFFER,
	SIT_TBUFFER,
	SIT_TEXTURE,
	SIT_SAMPLER,
	SIT_UAV_RWTYPED,
	SIT_STRUCTURED,
	SIT_UAV_RWSTRUCTURED,
	SIT_BYTEADDRESS,
	SIT_UAV_RWBYTEADDRESS,
	SIT_UAV_APPEND_STRUCTURED,
	SIT_UAV_CONSUME_STRUCTURED,
	SIT_UAV_RWSTRUCTURED_WITH_COUNTER,
	SIT_CBUFFER = SIT_CBUFFER,
	SIT_TBUFFER = SIT_TBUFFER,
	SIT_TEXTURE = SIT_TEXTURE,
	SIT_SAMPLER = SIT_SAMPLER,
	SIT_UAV_RWTYPED = SIT_UAV_RWTYPED,
	SIT_STRUCTURED = SIT_STRUCTURED,
	SIT_UAV_RWSTRUCTURED = SIT_UAV_RWSTRUCTURED,
	SIT_BYTEADDRESS = SIT_BYTEADDRESS,
	SIT_UAV_RWBYTEADDRESS = SIT_UAV_RWBYTEADDRESS,
	SIT_UAV_APPEND_STRUCTURED = SIT_UAV_APPEND_STRUCTURED,
	SIT_UAV_CONSUME_STRUCTURED = SIT_UAV_CONSUME_STRUCTURED,
	SIT_UAV_RWSTRUCTURED_WITH_COUNTER = SIT_UAV_RWSTRUCTURED_WITH_COUNTER
}

enum D3D_SHADER_CBUFFER_FLAGS
{
	CBF_USERPACKED = 1,
	CBF_USERPACKED = CBF_USERPACKED,
	CBF_FORCE_DWORD = _0x7fffffff
}

enum D3D_CBUFFER_TYPE
{
	CT_CBUFFER,
	CT_TBUFFER,
	CT_INTERFACE_POINTERS,
	CT_RESOURCE_BIND_INFO,
	CT_CBUFFER = CT_CBUFFER,
	CT_TBUFFER = CT_TBUFFER,
	CT_CBUFFER = CT_CBUFFER,
	CT_TBUFFER = CT_TBUFFER,
	CT_INTERFACE_POINTERS = CT_INTERFACE_POINTERS,
	CT_RESOURCE_BIND_INFO = CT_RESOURCE_BIND_INFO
}

enum D3D_NAME
{
	UNDEFINED = 0,
	POSITION = 1,
	CLIP_DISTANCE = 2,
	CULL_DISTANCE = 3,
	RENDER_TARGET_ARRAY_INDEX = 4,
	VIEWPORT_ARRAY_INDEX = 5,
	VERTEX_ID = 6,
	PRIMITIVE_ID = 7,
	INSTANCE_ID = 8,
	IS_FRONT_FACE = 9,
	SAMPLE_INDEX = 10,
	FINAL_QUAD_EDGE_TESSFACTOR = 11,
	FINAL_QUAD_INSIDE_TESSFACTOR = 12,
	FINAL_TRI_EDGE_TESSFACTOR = 13,
	FINAL_TRI_INSIDE_TESSFACTOR = 14,
	FINAL_LINE_DETAIL_TESSFACTOR = 15,
	FINAL_LINE_DENSITY_TESSFACTOR = 16,
	TARGET = 64,
	DEPTH = 65,
	COVERAGE = 66,
	DEPTH_GREATER_EQUAL = 67,
	DEPTH_LESS_EQUAL = 68,
	STENCIL_REF = 69,
	INNER_COVERAGE = 70,
	NAME_UNDEFINED = UNDEFINED,
	NAME_POSITION = POSITION,
	NAME_CLIP_DISTANCE = CLIP_DISTANCE,
	NAME_CULL_DISTANCE = CULL_DISTANCE,
	NAME_RENDER_TARGET_ARRAY_INDEX = RENDER_TARGET_ARRAY_INDEX,
	NAME_VIEWPORT_ARRAY_INDEX = VIEWPORT_ARRAY_INDEX,
	NAME_VERTEX_ID = VERTEX_ID,
	NAME_PRIMITIVE_ID = PRIMITIVE_ID,
	NAME_INSTANCE_ID = INSTANCE_ID,
	NAME_IS_FRONT_FACE = IS_FRONT_FACE,
	NAME_SAMPLE_INDEX = SAMPLE_INDEX,
	NAME_TARGET = TARGET,
	NAME_DEPTH = DEPTH,
	NAME_COVERAGE = COVERAGE,
	NAME_FINAL_QUAD_EDGE_TESSFACTOR = FINAL_QUAD_EDGE_TESSFACTOR,
	NAME_FINAL_QUAD_INSIDE_TESSFACTOR = FINAL_QUAD_INSIDE_TESSFACTOR,
	NAME_FINAL_TRI_EDGE_TESSFACTOR = FINAL_TRI_EDGE_TESSFACTOR,
	NAME_FINAL_TRI_INSIDE_TESSFACTOR = FINAL_TRI_INSIDE_TESSFACTOR,
	NAME_FINAL_LINE_DETAIL_TESSFACTOR = FINAL_LINE_DETAIL_TESSFACTOR,
	NAME_FINAL_LINE_DENSITY_TESSFACTOR = FINAL_LINE_DENSITY_TESSFACTOR,
	NAME_DEPTH_GREATER_EQUAL = DEPTH_GREATER_EQUAL,
	NAME_DEPTH_LESS_EQUAL = DEPTH_LESS_EQUAL,
	NAME_STENCIL_REF = STENCIL_REF,
	NAME_INNER_COVERAGE = INNER_COVERAGE
}

enum D3D_RESOURCE_RETURN_TYPE
{
	RETURN_TYPE_UNORM = 1,
	RETURN_TYPE_SNORM = 2,
	RETURN_TYPE_SINT = 3,
	RETURN_TYPE_UINT = 4,
	RETURN_TYPE_FLOAT = 5,
	RETURN_TYPE_MIXED = 6,
	RETURN_TYPE_DOUBLE = 7,
	RETURN_TYPE_CONTINUED = 8,
	RETURN_TYPE_UNORM = RETURN_TYPE_UNORM,
	RETURN_TYPE_SNORM = RETURN_TYPE_SNORM,
	RETURN_TYPE_SINT = RETURN_TYPE_SINT,
	RETURN_TYPE_UINT = RETURN_TYPE_UINT,
	RETURN_TYPE_FLOAT = RETURN_TYPE_FLOAT,
	RETURN_TYPE_MIXED = RETURN_TYPE_MIXED,
	RETURN_TYPE_UNORM = RETURN_TYPE_UNORM,
	RETURN_TYPE_SNORM = RETURN_TYPE_SNORM,
	RETURN_TYPE_SINT = RETURN_TYPE_SINT,
	RETURN_TYPE_UINT = RETURN_TYPE_UINT,
	RETURN_TYPE_FLOAT = RETURN_TYPE_FLOAT,
	RETURN_TYPE_MIXED = RETURN_TYPE_MIXED,
	RETURN_TYPE_DOUBLE = RETURN_TYPE_DOUBLE,
	RETURN_TYPE_CONTINUED = RETURN_TYPE_CONTINUED
}

enum D3D_REGISTER_COMPONENT_TYPE
{
	UNKNOWN = 0,
	UINT32 = 1,
	SINT32 = 2,
	FLOAT32 = 3,
	REGISTER_COMPONENT_UNKNOWN = UNKNOWN,
	REGISTER_COMPONENT_UINT32 = UINT32,
	REGISTER_COMPONENT_SINT32 = SINT32,
	REGISTER_COMPONENT_FLOAT32 = FLOAT32
}

enum D3D_TESSELLATOR_DOMAIN
{
	UNDEFINED = 0,
	ISOLINE = 1,
	TRI = 2,
	QUAD = 3,
	TESSELLATOR_DOMAIN_UNDEFINED = UNDEFINED,
	TESSELLATOR_DOMAIN_ISOLINE = ISOLINE,
	TESSELLATOR_DOMAIN_TRI = TRI,
	TESSELLATOR_DOMAIN_QUAD = QUAD
}

enum D3D_TESSELLATOR_PARTITIONING
{
	UNDEFINED = 0,
	INTEGER = 1,
	POW2 = 2,
	FRACTIONAL_ODD = 3,
	FRACTIONAL_EVEN = 4,
	TESSELLATOR_PARTITIONING_UNDEFINED = UNDEFINED,
	TESSELLATOR_PARTITIONING_INTEGER = INTEGER,
	TESSELLATOR_PARTITIONING_POW2 = POW2,
	TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = FRACTIONAL_ODD,
	TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = FRACTIONAL_EVEN
}

enum D3D_TESSELLATOR_OUTPUT_PRIMITIVE
{
	TESSELLATOR_OUTPUT_UNDEFINED = 0,
	TESSELLATOR_OUTPUT_POINT = 1,
	TESSELLATOR_OUTPUT_LINE = 2,
	TESSELLATOR_OUTPUT_TRIANGLE_CW = 3,
	TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4,
	TESSELLATOR_OUTPUT_UNDEFINED = TESSELLATOR_OUTPUT_UNDEFINED,
	TESSELLATOR_OUTPUT_POINT = TESSELLATOR_OUTPUT_POINT,
	TESSELLATOR_OUTPUT_LINE = TESSELLATOR_OUTPUT_LINE,
	TESSELLATOR_OUTPUT_TRIANGLE_CW = TESSELLATOR_OUTPUT_TRIANGLE_CW,
	TESSELLATOR_OUTPUT_TRIANGLE_CCW = TESSELLATOR_OUTPUT_TRIANGLE_CCW
}

enum D3D_MIN_PRECISION
{
	DEFAULT = 0,
	FLOAT_16 = 1,
	FLOAT_2_8 = 2,
	RESERVED = 3,
	SINT_16 = 4,
	UINT_16 = 5,
	ANY_16 = _0xf0,
	ANY_10 = _0xf1
}

enum D3D_INTERPOLATION_MODE
{
	UNDEFINED = 0,
	CONSTANT = 1,
	LINEAR = 2,
	LINEAR_CENTROID = 3,
	LINEAR_NOPERSPECTIVE = 4,
	LINEAR_NOPERSPECTIVE_CENTROID = 5,
	LINEAR_SAMPLE = 6,
	LINEAR_NOPERSPECTIVE_SAMPLE = 7
}

enum D3D_PARAMETER_FLAGS
{
	PF_NONE = 0x00000000,
	PF_IN = 0x00000001,
	PF_OUT = 0x00000002,
	PF_FORCE_DWORD = _0x7fffffff
}

enum D3D11_INPUT_CLASSIFICATION
{
	INPUT_PER_VERTEX_DATA = 0,
	INPUT_PER_INSTANCE_DATA = 1
}

enum D3D11_FILL_MODE
{
	WIREFRAME = 2,
	SOLID = 3
}

enum D3D11_CULL_MODE
{
	NONE = 1,
	FRONT = 2,
	BACK = 3
}

enum D3D11_RESOURCE_DIMENSION
{
	UNKNOWN = 0,
	BUFFER = 1,
	TEXTURE1D = 2,
	TEXTURE2D = 3,
	TEXTURE3D = 4
}

enum D3D11_DSV_DIMENSION
{
	UNKNOWN = 0,
	TEXTURE1D = 1,
	TEXTURE1DARRAY = 2,
	TEXTURE2D = 3,
	TEXTURE2DARRAY = 4,
	TEXTURE2DMS = 5,
	TEXTURE2DMSARRAY = 6
}

enum D3D11_RTV_DIMENSION
{
	UNKNOWN = 0,
	BUFFER = 1,
	TEXTURE1D = 2,
	TEXTURE1DARRAY = 3,
	TEXTURE2D = 4,
	TEXTURE2DARRAY = 5,
	TEXTURE2DMS = 6,
	TEXTURE2DMSARRAY = 7,
	TEXTURE3D = 8
}

enum D3D11_UAV_DIMENSION
{
	UNKNOWN = 0,
	BUFFER = 1,
	TEXTURE1D = 2,
	TEXTURE1DARRAY = 3,
	TEXTURE2D = 4,
	TEXTURE2DARRAY = 5,
	TEXTURE3D = 8
}

enum D3D11_USAGE
{
	DEFAULT = 0,
	IMMUTABLE = 1,
	DYNAMIC = 2,
	STAGING = 3
}

enum D3D11_BIND_FLAG
{
	VERTEX_BUFFER = 0x00000001L,
	INDEX_BUFFER = 0x00000002L,
	CONSTANT_BUFFER = 0x00000004L,
	SHADER_RESOURCE = 0x00000008L,
	STREAM_OUTPUT = 0x00000010L,
	RENDER_TARGET = 0x00000020L,
	DEPTH_STENCIL = 0x00000040L,
	UNORDERED_ACCESS = 0x00000080L,
	DECODER = 0x00000200L,
	VIDEO_ENCODER = 0x00000400L
}

enum D3D11_CPU_ACCESS_FLAG
{
	WRITE = 0x00010000L,
	READ = 0x00020000L
}

enum D3D11_RESOURCE_MISC_FLAG
{
	GENERATE_MIPS = 0x00000001L,
	SHARED = 0x00000002L,
	TEXTURECUBE = 0x00000004L,
	DRAWINDIRECT_ARGS = 0x00000010L,
	BUFFER_ALLOW_RAW_VIEWS = 0x00000020L,
	BUFFER_STRUCTURED = 0x00000040L,
	RESOURCE_CLAMP = 0x00000080L,
	SHARED_KEYEDMUTEX = 0x00000100L,
	GDI_COMPATIBLE = 0x00000200L,
	SHARED_NTHANDLE = 0x00000800L,
	RESTRICTED_CONTENT = 0x00001000L,
	RESTRICT_SHARED_RESOURCE = 0x00002000L,
	RESTRICT_SHARED_RESOURCE_DRIVER = 0x00004000L,
	GUARDED = 0x00008000L,
	TILE_POOL = 0x00020000L,
	TILED = 0x00040000L,
	HW_PROTECTED = 0x00080000L
}

enum D3D11_MAP
{
	READ = 1,
	WRITE = 2,
	READ_WRITE = 3,
	WRITE_DISCARD = 4,
	WRITE_NO_OVERWRITE = 5
}

enum D3D11_MAP_FLAG
{
	FLAG_DO_NOT_WAIT = 0x00100000L
}

enum D3D11_RAISE_FLAG
{
	FLAG_DRIVER_INTERNAL_ERROR = 0x1L
}

enum D3D11_CLEAR_FLAG
{
	DEPTH = 0x01L,
	STENCIL = 0x02L
}

enum D3D11_COMPARISON_FUNC
{
	COMPARISON_NEVER = 1,
	COMPARISON_LESS = 2,
	COMPARISON_EQUAL = 3,
	COMPARISON_LESS_EQUAL = 4,
	COMPARISON_GREATER = 5,
	COMPARISON_NOT_EQUAL = 6,
	COMPARISON_GREATER_EQUAL = 7,
	COMPARISON_ALWAYS = 8
}

enum D3D11_DEPTH_WRITE_MASK
{
	ZERO = 0,
	ALL = 1
}

enum D3D11_STENCIL_OP
{
	KEEP = 1,
	ZERO = 2,
	REPLACE = 3,
	INCR_SAT = 4,
	DECR_SAT = 5,
	INVERT = 6,
	INCR = 7,
	DECR = 8
}

enum D3D11_BLEND
{
	ZERO = 1,
	ONE = 2,
	SRC_COLOR = 3,
	INV_SRC_COLOR = 4,
	SRC_ALPHA = 5,
	INV_SRC_ALPHA = 6,
	DEST_ALPHA = 7,
	INV_DEST_ALPHA = 8,
	DEST_COLOR = 9,
	INV_DEST_COLOR = 10,
	SRC_ALPHA_SAT = 11,
	BLEND_FACTOR = 14,
	INV_BLEND_FACTOR = 15,
	SRC1_COLOR = 16,
	INV_SRC1_COLOR = 17,
	SRC1_ALPHA = 18,
	INV_SRC1_ALPHA = 19
}

enum D3D11_BLEND_OP
{
	ADD = 1,
	SUBTRACT = 2,
	REV_SUBTRACT = 3,
	MIN = 4,
	MAX = 5
}

enum D3D11_COLOR_WRITE_ENABLE
{
	RED = 1,
	GREEN = 2,
	BLUE = 4,
	ALPHA = 8,
	ALL = (D3D11_COLOR_WRITE_ENABLE_RED|D3D11_COLOR_WRITE_ENABLE_GREEN|D3D11_COLOR_WRITE_ENABLE_BLUE|D3D11_COLOR_WRITE_ENABLE_ALPHA)
}

enum D3D11_TEXTURECUBE_FACE
{
	POSITIVE_X = 0,
	NEGATIVE_X = 1,
	POSITIVE_Y = 2,
	NEGATIVE_Y = 3,
	POSITIVE_Z = 4,
	NEGATIVE_Z = 5
}

enum D3D11_BUFFEREX_SRV_FLAG
{
	FLAG_RAW = 0x00000001
}

enum D3D11_DSV_FLAG
{
	READ_ONLY_DEPTH = 0x1L,
	READ_ONLY_STENCIL = 0x2L
}

enum D3D11_BUFFER_UAV_FLAG
{
	FLAG_RAW = 0x00000001,
	FLAG_APPEND = 0x00000002,
	FLAG_COUNTER = 0x00000004
}

enum D3D11_FILTER
{
	MIN_MAG_MIP_POINT = 0x00000000,
	MIN_MAG_POINT_MIP_LINEAR = 0x00000001,
	MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000004,
	MIN_POINT_MAG_MIP_LINEAR = 0x00000005,
	MIN_LINEAR_MAG_MIP_POINT = 0x00000010,
	MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000011,
	MIN_MAG_LINEAR_MIP_POINT = 0x00000014,
	MIN_MAG_MIP_LINEAR = 0x00000015,
	ANISOTROPIC = 0x00000055,
	COMPARISON_MIN_MAG_MIP_POINT = 0x00000080,
	COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x00000081,
	COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000084,
	COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x00000085,
	COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x00000090,
	COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000091,
	COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x00000094,
	COMPARISON_MIN_MAG_MIP_LINEAR = 0x00000095,
	COMPARISON_ANISOTROPIC = _0x000000d5,
	MINIMUM_MIN_MAG_MIP_POINT = 0x00000100,
	MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x00000101,
	MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000104,
	MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x00000105,
	MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x00000110,
	MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000111,
	MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x00000114,
	MINIMUM_MIN_MAG_MIP_LINEAR = 0x00000115,
	MINIMUM_ANISOTROPIC = 0x00000155,
	MAXIMUM_MIN_MAG_MIP_POINT = 0x00000180,
	MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x00000181,
	MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000184,
	MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x00000185,
	MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x00000190,
	MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000191,
	MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x00000194,
	MAXIMUM_MIN_MAG_MIP_LINEAR = 0x00000195,
	MAXIMUM_ANISOTROPIC = _0x000001d5
}

enum D3D11_FILTER_TYPE
{
	TYPE_POINT = 0,
	TYPE_LINEAR = 1
}

enum D3D11_FILTER_REDUCTION_TYPE
{
	TYPE_STANDARD = 0,
	TYPE_COMPARISON = 1,
	TYPE_MINIMUM = 2,
	TYPE_MAXIMUM = 3
}

enum D3D11_TEXTURE_ADDRESS_MODE
{
	WRAP = 1,
	MIRROR = 2,
	CLAMP = 3,
	BORDER = 4,
	MIRROR_ONCE = 5
}

enum D3D11_FORMAT_SUPPORT
{
	BUFFER = 0x00000001,
	IA_VERTEX_BUFFER = 0x00000002,
	IA_INDEX_BUFFER = 0x00000004,
	SO_BUFFER = 0x00000008,
	TEXTURE1D = 0x00000010,
	TEXTURE2D = 0x00000020,
	TEXTURE3D = 0x00000040,
	TEXTURECUBE = 0x00000080,
	SHADER_LOAD = 0x00000100,
	SHADER_SAMPLE = 0x00000200,
	SHADER_SAMPLE_COMPARISON = 0x00000400,
	SHADER_SAMPLE_MONO_TEXT = 0x00000800,
	MIP = 0x00001000,
	MIP_AUTOGEN = 0x00002000,
	RENDER_TARGET = 0x00004000,
	BLENDABLE = 0x00008000,
	DEPTH_STENCIL = 0x00010000,
	CPU_LOCKABLE = 0x00020000,
	MULTISAMPLE_RESOLVE = 0x00040000,
	DISPLAY = 0x00080000,
	CAST_WITHIN_BIT_LAYOUT = 0x00100000,
	MULTISAMPLE_RENDERTARGET = 0x00200000,
	MULTISAMPLE_LOAD = 0x00400000,
	SHADER_GATHER = 0x00800000,
	BACK_BUFFER_CAST = 0x01000000,
	TYPED_UNORDERED_ACCESS_VIEW = 0x02000000,
	SHADER_GATHER_COMPARISON = 0x04000000,
	DECODER_OUTPUT = 0x08000000,
	VIDEO_PROCESSOR_OUTPUT = 0x10000000,
	VIDEO_PROCESSOR_INPUT = 0x20000000,
	VIDEO_ENCODER = 0x40000000
}

enum D3D11_FORMAT_SUPPORT2
{
	UAV_ATOMIC_ADD = 0x00000001,
	UAV_ATOMIC_BITWISE_OPS = 0x00000002,
	UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x00000004,
	UAV_ATOMIC_EXCHANGE = 0x00000008,
	UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x00000010,
	UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x00000020,
	UAV_TYPED_LOAD = 0x00000040,
	UAV_TYPED_STORE = 0x00000080,
	OUTPUT_MERGER_LOGIC_OP = 0x00000100,
	TILED = 0x00000200,
	SHAREABLE = 0x00000400,
	MULTIPLANE_OVERLAY = 0x00004000
}

enum D3D11_ASYNC_GETDATA_FLAG
{
	DONOTFLUSH = 0x1
}

enum D3D11_QUERY
{
	EVENT = 0,
	OCCLUSION,
	TIMESTAMP,
	TIMESTAMP_DISJOINT,
	PIPELINE_STATISTICS,
	OCCLUSION_PREDICATE,
	SO_STATISTICS,
	SO_OVERFLOW_PREDICATE,
	SO_STATISTICS_STREAM0,
	SO_OVERFLOW_PREDICATE_STREAM0,
	SO_STATISTICS_STREAM1,
	SO_OVERFLOW_PREDICATE_STREAM1,
	SO_STATISTICS_STREAM2,
	SO_OVERFLOW_PREDICATE_STREAM2,
	SO_STATISTICS_STREAM3,
	SO_OVERFLOW_PREDICATE_STREAM3
}

enum D3D11_QUERY_MISC_FLAG
{
	PREDICATEHINT = 0x1
}

enum D3D11_COUNTER
{
	DEVICE_DEPENDENT_0 = 0x40000000
}

enum D3D11_COUNTER_TYPE
{
	TYPE_FLOAT32,
	TYPE_UINT16,
	TYPE_UINT32,
	TYPE_UINT64
}

enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
{
	STANDARD_MULTISAMPLE_PATTERN = _0xffffffff,
	CENTER_MULTISAMPLE_PATTERN = _0xfffffffe
}

enum D3D11_DEVICE_CONTEXT_TYPE
{
	IMMEDIATE,
	DEFERRED
}

enum D3D11_FEATURE
{
	THREADING,
	DOUBLES,
	FORMAT_SUPPORT,
	FORMAT_SUPPORT2,
	D3D10_X_HARDWARE_OPTIONS,
	D3D11_OPTIONS,
	ARCHITECTURE_INFO,
	D3D9_OPTIONS,
	SHADER_MIN_PRECISION_SUPPORT,
	D3D9_SHADOW_SUPPORT,
	D3D11_OPTIONS1,
	D3D9_SIMPLE_INSTANCING_SUPPORT,
	MARKER_SUPPORT,
	D3D9_OPTIONS1,
	D3D11_OPTIONS2,
	D3D11_OPTIONS3,
	GPU_VIRTUAL_ADDRESS_SUPPORT,
	D3D11_OPTIONS4,
	SHADER_CACHE
}

enum D3D11_SHADER_MIN_PRECISION_SUPPORT
{
	SHADER_MIN_PRECISION_10_BIT = 0x1,
	SHADER_MIN_PRECISION_16_BIT = 0x2
}

enum D3D11_TILED_RESOURCES_TIER
{
	TILED_RESOURCES_NOT_SUPPORTED = 0,
	_1 = 1,
	_2 = 2,
	_3 = 3
}

enum D3D11_CONSERVATIVE_RASTERIZATION_TIER
{
	CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0,
	_1 = 1,
	_2 = 2,
	_3 = 3
}

enum D3D11_SHADER_CACHE_SUPPORT_FLAGS
{
	NONE = 0x0,
	AUTOMATIC_INPROC_CACHE = 0x1,
	AUTOMATIC_DISK_CACHE = 0x2
}

enum D3D11_VIDEO_DECODER_BUFFER_TYPE
{
	PICTURE_PARAMETERS = 0,
	MACROBLOCK_CONTROL = 1,
	RESIDUAL_DIFFERENCE = 2,
	DEBLOCKING_CONTROL = 3,
	INVERSE_QUANTIZATION_MATRIX = 4,
	SLICE_CONTROL = 5,
	BITSTREAM = 6,
	MOTION_VECTOR = 7,
	FILM_GRAIN = 8
}

enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
{
	INPUT = 0x00000001,
	OUTPUT = 0x00000002
}

enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
{
	LINEAR_SPACE = 0x1,
	xvYCC = 0x2,
	RGB_RANGE_CONVERSION = 0x4,
	YCbCr_MATRIX_CONVERSION = 0x8,
	NOMINAL_RANGE = 0x10
}

enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
{
	ALPHA_FILL = 0x1,
	CONSTRICTION = 0x2,
	LUMA_KEY = 0x4,
	ALPHA_PALETTE = 0x8,
	LEGACY = 0x10,
	STEREO = 0x20,
	ROTATION = 0x40,
	ALPHA_STREAM = 0x80,
	PIXEL_ASPECT_RATIO = 0x100,
	MIRROR = 0x200,
	SHADER_USAGE = 0x400,
	METADATA_HDR10 = 0x800
}

enum D3D11_VIDEO_PROCESSOR_FILTER_CAPS
{
	BRIGHTNESS = 0x1,
	CONTRAST = 0x2,
	HUE = 0x4,
	SATURATION = 0x8,
	NOISE_REDUCTION = 0x10,
	EDGE_ENHANCEMENT = 0x20,
	ANAMORPHIC_SCALING = 0x40,
	STEREO_ADJUSTMENT = 0x80
}

enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
{
	RGB_INTERLACED = 0x1,
	RGB_PROCAMP = 0x2,
	RGB_LUMA_KEY = 0x4,
	PALETTE_INTERLACED = 0x8
}

enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
{
	DENOISE = 0x01,
	DERINGING = 0x02,
	EDGE_ENHANCEMENT = 0x04,
	COLOR_CORRECTION = 0x08,
	FLESH_TONE_MAPPING = 0x10,
	IMAGE_STABILIZATION = 0x20,
	SUPER_RESOLUTION = 0x40,
	ANAMORPHIC_SCALING = 0x80
}

enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS
{
	MONO_OFFSET = 0x01,
	ROW_INTERLEAVED = 0x02,
	COLUMN_INTERLEAVED = 0x04,
	CHECKERBOARD = 0x08,
	FLIP_MODE = 0x10
}

enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
{
	DEINTERLACE_BLEND = 0x1,
	DEINTERLACE_BOB = 0x2,
	DEINTERLACE_ADAPTIVE = 0x4,
	DEINTERLACE_MOTION_COMPENSATION = 0x8,
	INVERSE_TELECINE = 0x10,
	FRAME_RATE_CONVERSION = 0x20
}

enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
{
	_32 = 0x1,
	_22 = 0x2,
	_2224 = 0x4,
	_2332 = 0x8,
	_32322 = 0x10,
	_55 = 0x20,
	_64 = 0x40,
	_87 = 0x80,
	_222222222223 = 0x100,
	OTHER = 0x80000000
}

enum D3D11_CONTENT_PROTECTION_CAPS
{
	SOFTWARE = 0x00000001,
	HARDWARE = 0x00000002,
	PROTECTION_ALWAYS_ON = 0x00000004,
	PARTIAL_DECRYPTION = 0x00000008,
	CONTENT_KEY = 0x00000010,
	FRESHEN_SESSION_KEY = 0x00000020,
	ENCRYPTED_READ_BACK = 0x00000040,
	ENCRYPTED_READ_BACK_KEY = 0x00000080,
	SEQUENTIAL_CTR_IV = 0x00000100,
	ENCRYPT_SLICEDATA_ONLY = 0x00000200,
	DECRYPTION_BLT = 0x00000400,
	HARDWARE_PROTECT_UNCOMPRESSED = 0x00000800,
	HARDWARE_PROTECTED_MEMORY_PAGEABLE = 0x00001000,
	HARDWARE_TEARDOWN = 0x00002000,
	HARDWARE_DRM_COMMUNICATION = 0x00004000
}

enum D3D11_VIDEO_PROCESSOR_FILTER
{
	BRIGHTNESS = 0,
	CONTRAST = 1,
	HUE = 2,
	SATURATION = 3,
	NOISE_REDUCTION = 4,
	EDGE_ENHANCEMENT = 5,
	ANAMORPHIC_SCALING = 6,
	STEREO_ADJUSTMENT = 7
}

enum D3D11_VIDEO_FRAME_FORMAT
{
	PROGRESSIVE = 0,
	INTERLACED_TOP_FIELD_FIRST = 1,
	INTERLACED_BOTTOM_FIELD_FIRST = 2
}

enum D3D11_VIDEO_USAGE
{
	PLAYBACK_NORMAL = 0,
	OPTIMAL_SPEED = 1,
	OPTIMAL_QUALITY = 2
}

enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
{
	UNDEFINED = 0,
	_16_235 = 1,
	_0_255 = 2
}

enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
{
	MODE_OPAQUE = 0,
	MODE_BACKGROUND = 1,
	MODE_DESTINATION = 2,
	MODE_SOURCE_STREAM = 3
}

enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
{
	NORMAL = 0,
	HALF = 1,
	CUSTOM = 2
}

enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
{
	MONO = 0,
	HORIZONTAL = 1,
	VERTICAL = 2,
	SEPARATE = 3,
	MONO_OFFSET = 4,
	ROW_INTERLEAVED = 5,
	COLUMN_INTERLEAVED = 6,
	CHECKERBOARD = 7
}

enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
{
	NONE = 0,
	FRAME0 = 1,
	FRAME1 = 2
}

enum D3D11_VIDEO_PROCESSOR_ROTATION
{
	IDENTITY = 0,
	_90 = 1,
	_180 = 2,
	_270 = 3
}

enum D3D11_AUTHENTICATED_CHANNEL_TYPE
{
	D3D11 = 1,
	DRIVER_SOFTWARE = 2,
	DRIVER_HARDWARE = 3
}

enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
{
	PROCESSIDTYPE_UNKNOWN = 0,
	PROCESSIDTYPE_DWM = 1,
	PROCESSIDTYPE_HANDLE = 2
}

enum D3D11_BUS_TYPE
{
	TYPE_OTHER = 0x00000000,
	TYPE_PCI = 0x00000001,
	TYPE_PCIX = 0x00000002,
	TYPE_PCIEXPRESS = 0x00000003,
	TYPE_AGP = 0x00000004,
	IMPL_MODIFIER_INSIDE_OF_CHIPSET = 0x00010000,
	IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 0x00020000,
	IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 0x00030000,
	IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 0x00040000,
	IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x00050000,
	IMPL_MODIFIER_NON_STANDARD = 0x80000000
}

enum D3D11_VDOV_DIMENSION
{
	UNKNOWN = 0,
	TEXTURE2D = 1
}

enum D3D11_VPIV_DIMENSION
{
	UNKNOWN = 0,
	TEXTURE2D = 1
}

enum D3D11_VPOV_DIMENSION
{
	UNKNOWN = 0,
	TEXTURE2D = 1,
	TEXTURE2DARRAY = 2
}

enum D3D11_CREATE_DEVICE_FLAG
{
	SINGLETHREADED = 0x1,
	DEBUG = 0x2,
	SWITCH_TO_REF = 0x4,
	PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
	BGRA_SUPPORT = 0x20,
	DEBUGGABLE = 0x40,
	PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x0080,
	DISABLE_GPU_TIMEOUT = 0x0100,
	VIDEO_SUPPORT = 0x0800
}

enum D3D11_COPY_FLAGS
{
	NO_OVERWRITE = 0x00000001,
	DISCARD = 0x00000002
}

enum D3D11_LOGIC_OP
{
	CLEAR = 0,
	SET,
	COPY,
	COPY_INVERTED,
	NOOP,
	INVERT,
	AND,
	NAND,
	OR,
	NOR,
	XOR,
	EQUIV,
	AND_REVERSE,
	AND_INVERTED,
	OR_REVERSE,
	OR_INVERTED
}

enum D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG
{
	SINGLETHREADED = 0x1
}

enum D3D11_VIDEO_DECODER_CAPS
{
	DOWNSAMPLE = 0x1,
	NON_REAL_TIME = 0x02,
	DOWNSAMPLE_DYNAMIC = 0x04,
	DOWNSAMPLE_REQUIRED = 0x08,
	UNSUPPORTED = 0x10
}

enum D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS
{
	HINT_MULTIPLANE_OVERLAY_ROTATION = 0x01,
	HINT_MULTIPLANE_OVERLAY_RESIZE = 0x02,
	HINT_MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION = 0x04,
	HINT_TRIPLE_BUFFER_OUTPUT = 0x08
}

enum D3D11_CRYPTO_SESSION_STATUS
{
	OK = 0,
	KEY_LOST = 1,
	KEY_AND_CONTENT_LOST = 2
}

enum D3D11_TILE_MAPPING_FLAG
{
	NO_OVERWRITE = 0x00000001
}

enum D3D11_TILE_RANGE_FLAG
{
	NULL = 0x00000001,
	SKIP = 0x00000002,
	REUSE_SINGLE_TILE = 0x00000004
}

enum D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG
{
	TILED_RESOURCE = 0x00000001
}

enum D3D11_TILE_COPY_FLAG
{
	NO_OVERWRITE = 0x00000001,
	LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x00000002,
	SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x00000004
}

enum D3D11_CONTEXT_TYPE
{
	TYPE_ALL = 0,
	TYPE_3D = 1,
	TYPE_COMPUTE = 2,
	TYPE_COPY = 3,
	TYPE_VIDEO = 4
}

enum D3D11_TEXTURE_LAYOUT
{
	UNDEFINED = 0,
	ROW_MAJOR = 1,
	_64K_STANDARD_SWIZZLE = 2
}

enum D3D11_CONSERVATIVE_RASTERIZATION_MODE
{
	MODE_OFF = 0,
	MODE_ON = 1
}

enum D3D11_FENCE_FLAG
{
	FLAG_NONE = 0x00000001,
	FLAG_SHARED = 0x00000002,
	FLAG_SHARED_CROSS_ADAPTER = 0x00000004
}

enum DXGI_RESIDENCY
{
	FULLY_RESIDENT = 1,
	RESIDENT_IN_SHARED_MEMORY = 2,
	EVICTED_TO_DISK = 3
}

enum DXGI_SWAP_EFFECT
{
	DISCARD = 0,
	SEQUENTIAL = 1,
	FLIP_SEQUENTIAL = 3,
	FLIP_DISCARD = 4
}

enum DXGI_SWAP_CHAIN_FLAG
{
	FLAG_NONPREROTATED = 1,
	FLAG_ALLOW_MODE_SWITCH = 2,
	FLAG_GDI_COMPATIBLE = 4,
	FLAG_RESTRICTED_CONTENT = 8,
	FLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 16,
	FLAG_DISPLAY_ONLY = 32,
	FLAG_FRAME_LATENCY_WAITABLE_OBJECT = 64,
	FLAG_FOREGROUND_LAYER = 128,
	FLAG_FULLSCREEN_VIDEO = 256,
	FLAG_YUV_VIDEO = 512,
	FLAG_HW_PROTECTED = 1024,
	FLAG_ALLOW_TEARING = 2048,
	FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS = 4096
}

enum DXGI_ADAPTER_FLAG
{
	FLAG_NONE = 0,
	FLAG_REMOTE = 1,
	FLAG_SOFTWARE = 2,
	FLAG_FORCE_DWORD = _0xFFFFFFFF
}

enum DXGI_COLOR_SPACE_TYPE
{
	RGB_FULL_G22_NONE_P709 = 0,
	RGB_FULL_G10_NONE_P709 = 1,
	RGB_STUDIO_G22_NONE_P709 = 2,
	RGB_STUDIO_G22_NONE_P2020 = 3,
	RESERVED = 4,
	YCBCR_FULL_G22_NONE_P709_X601 = 5,
	YCBCR_STUDIO_G22_LEFT_P601 = 6,
	YCBCR_FULL_G22_LEFT_P601 = 7,
	YCBCR_STUDIO_G22_LEFT_P709 = 8,
	YCBCR_FULL_G22_LEFT_P709 = 9,
	YCBCR_STUDIO_G22_LEFT_P2020 = 10,
	YCBCR_FULL_G22_LEFT_P2020 = 11,
	RGB_FULL_G2084_NONE_P2020 = 12,
	YCBCR_STUDIO_G2084_LEFT_P2020 = 13,
	RGB_STUDIO_G2084_NONE_P2020 = 14,
	YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15,
	YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16,
	RGB_FULL_G22_NONE_P2020 = 17,
	YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18,
	YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19,
	CUSTOM = _0xFFFFFFFF
}

enum DXGI_FORMAT
{
	UNKNOWN = 0,
	R32G32B32A32_TYPELESS = 1,
	R32G32B32A32_FLOAT = 2,
	R32G32B32A32_UINT = 3,
	R32G32B32A32_SINT = 4,
	R32G32B32_TYPELESS = 5,
	R32G32B32_FLOAT = 6,
	R32G32B32_UINT = 7,
	R32G32B32_SINT = 8,
	R16G16B16A16_TYPELESS = 9,
	R16G16B16A16_FLOAT = 10,
	R16G16B16A16_UNORM = 11,
	R16G16B16A16_UINT = 12,
	R16G16B16A16_SNORM = 13,
	R16G16B16A16_SINT = 14,
	R32G32_TYPELESS = 15,
	R32G32_FLOAT = 16,
	R32G32_UINT = 17,
	R32G32_SINT = 18,
	R32G8X24_TYPELESS = 19,
	D32_FLOAT_S8X24_UINT = 20,
	R32_FLOAT_X8X24_TYPELESS = 21,
	X32_TYPELESS_G8X24_UINT = 22,
	R10G10B10A2_TYPELESS = 23,
	R10G10B10A2_UNORM = 24,
	R10G10B10A2_UINT = 25,
	R11G11B10_FLOAT = 26,
	R8G8B8A8_TYPELESS = 27,
	R8G8B8A8_UNORM = 28,
	R8G8B8A8_UNORM_SRGB = 29,
	R8G8B8A8_UINT = 30,
	R8G8B8A8_SNORM = 31,
	R8G8B8A8_SINT = 32,
	R16G16_TYPELESS = 33,
	R16G16_FLOAT = 34,
	R16G16_UNORM = 35,
	R16G16_UINT = 36,
	R16G16_SNORM = 37,
	R16G16_SINT = 38,
	R32_TYPELESS = 39,
	D32_FLOAT = 40,
	R32_FLOAT = 41,
	R32_UINT = 42,
	R32_SINT = 43,
	R24G8_TYPELESS = 44,
	D24_UNORM_S8_UINT = 45,
	R24_UNORM_X8_TYPELESS = 46,
	X24_TYPELESS_G8_UINT = 47,
	R8G8_TYPELESS = 48,
	R8G8_UNORM = 49,
	R8G8_UINT = 50,
	R8G8_SNORM = 51,
	R8G8_SINT = 52,
	R16_TYPELESS = 53,
	R16_FLOAT = 54,
	D16_UNORM = 55,
	R16_UNORM = 56,
	R16_UINT = 57,
	R16_SNORM = 58,
	R16_SINT = 59,
	R8_TYPELESS = 60,
	R8_UNORM = 61,
	R8_UINT = 62,
	R8_SNORM = 63,
	R8_SINT = 64,
	A8_UNORM = 65,
	R1_UNORM = 66,
	R9G9B9E5_SHAREDEXP = 67,
	R8G8_B8G8_UNORM = 68,
	G8R8_G8B8_UNORM = 69,
	BC1_TYPELESS = 70,
	BC1_UNORM = 71,
	BC1_UNORM_SRGB = 72,
	BC2_TYPELESS = 73,
	BC2_UNORM = 74,
	BC2_UNORM_SRGB = 75,
	BC3_TYPELESS = 76,
	BC3_UNORM = 77,
	BC3_UNORM_SRGB = 78,
	BC4_TYPELESS = 79,
	BC4_UNORM = 80,
	BC4_SNORM = 81,
	BC5_TYPELESS = 82,
	BC5_UNORM = 83,
	BC5_SNORM = 84,
	B5G6R5_UNORM = 85,
	B5G5R5A1_UNORM = 86,
	B8G8R8A8_UNORM = 87,
	B8G8R8X8_UNORM = 88,
	R10G10B10_XR_BIAS_A2_UNORM = 89,
	B8G8R8A8_TYPELESS = 90,
	B8G8R8A8_UNORM_SRGB = 91,
	B8G8R8X8_TYPELESS = 92,
	B8G8R8X8_UNORM_SRGB = 93,
	BC6H_TYPELESS = 94,
	BC6H_UF16 = 95,
	BC6H_SF16 = 96,
	BC7_TYPELESS = 97,
	BC7_UNORM = 98,
	BC7_UNORM_SRGB = 99,
	AYUV = 100,
	Y410 = 101,
	Y416 = 102,
	NV12 = 103,
	P010 = 104,
	P016 = 105,
	_420_OPAQUE = 106,
	YUY2 = 107,
	Y210 = 108,
	Y216 = 109,
	NV11 = 110,
	AI44 = 111,
	IA44 = 112,
	P8 = 113,
	A8P8 = 114,
	B4G4R4A4_UNORM = 115,
	P208 = 130,
	V208 = 131,
	V408 = 132,
	FORCE_UINT = _0xffffffff
}

enum DXGI_MODE_SCANLINE_ORDER
{
	UNSPECIFIED = 0,
	PROGRESSIVE = 1,
	UPPER_FIELD_FIRST = 2,
	LOWER_FIELD_FIRST = 3
}

enum DXGI_MODE_SCALING
{
	UNSPECIFIED = 0,
	CENTERED = 1,
	STRETCHED = 2
}

enum DXGI_MODE_ROTATION
{
	UNSPECIFIED = 0,
	IDENTITY = 1,
	ROTATE90 = 2,
	ROTATE180 = 3,
	ROTATE270 = 4
}